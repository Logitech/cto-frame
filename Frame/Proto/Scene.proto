syntax = "proto3";

import "Pixel.proto";
import "Math.proto";

package frame.proto;

// Scene is a way to load meshes.
// For now it only load them from obj, mtl files but ths will be able to load
// from fbx files as soon as we switch to this assimp library. This will add
// skeleton animation so a new type of mesh.

// Matrix
// Next 6
message SceneMatrix {
	// This is the name of the scene matrix.
	string name = 1;
	// Give the name of the parent (if present).
	string parent = 2;
	// Matrix.
	UniformMatrix4 matrix = 3;
	// Quaternion
	UniformQuaternion quaternion = 4;
	// Clean the z buffer to make thinks seen.
	CleanBuffer clean_buffer = 5;
}

// Static Mesh.
// Next 8
message SceneStaticMesh {
	// This is the name of the mesh.
	string name = 1;
	// Give the name of the parent (if present).
	string parent = 2;

	// Some mesh are included?
	enum Enum {
		INVALID				= 0;
		CUBE				= 1;
		QUAD				= 2;
	}
	// This can be a static mesh enum.
	Enum mesh_enum = 6;
	// Where the file is loaded from.
	string file_name = 3;

	// Material name.
	string material_name = 5;
	// Skip the material that are in the file.
	bool skip_file_material = 7;
}

// Camera
// Next 10
message SceneCamera {
	// This is the name of the camera.
	string name = 1;
	// Give the name of the parent (if present).
	string parent = 2;
	// Position of the camera in space.
	UniformVector3 position = 3;
	// Target where the camera is looking.
	UniformVector3 target = 4;
	// Up vector of the camera.
	UniformVector3 up = 5;
	// Fov in degrees.
	float fov_degrees = 6;
	// Width / Height proportions.
	float aspect_ratio = 7;
	// Near clipping plane.
	float near_clip = 8;
	// Far clipping plane.
	float far_clip = 9;
}

// Light
// Next 9
message SceneLight {
	// This is the name of the light.
	string name = 1;
	// Give the name of the parent (if present).
	string parent = 2;
	
	// Light type this is what the light can be.
	enum Enum {
		INVALID = 0;
		AMBIENT = 1;
		POINT = 2;
		DIRECTIONAL = 3;
		SPOT = 4;
	}
	// The light type of this light.
	Enum light_type = 3;
	
	// Position of the light.
	// not considered in case this is AMBIENT, DIRECTIONAL.
	UniformVector3 position = 4;
	// Direction of the light 
	// not considered in case this is AMBIENT, POINT.
	UniformVector3 direction = 5;
	// Dot inner limit for spot light.
	// not considered in cast this is AMBIENT, POINT, DIRECTIONAL.
	float dot_inner_limit = 6;
	// Dot outer limit for spot light.
	// not considered in cast this is AMBIENT, POINT, DIRECTIONAL.
	float dot_outer_limit = 7;

	// Color of the light.
	UniformVector3 color = 8;
}

// Scene definition.
// Next 7
message SceneTree {
	// This defined witch is the root of the scene tree (not really needed).
	string default_root_name = 1;
	// This is the default camera node name.
	string default_camera_name = 2;
	// This is a list of scene matrices.
	repeated SceneMatrix scene_matrices = 3;
	// This is a list of scene meshes.
	repeated SceneStaticMesh scene_static_meshes = 4;
	// This is the camera scene node.
	repeated SceneCamera scene_cameras = 5;
	// This is the node for the lights.
	repeated SceneLight scene_lights = 6;
}
