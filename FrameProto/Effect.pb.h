// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Effect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Effect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Effect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Uniform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Effect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Effect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Effect_2eproto;
namespace frame {
namespace proto {
class Effect;
class EffectDefaultTypeInternal;
extern EffectDefaultTypeInternal _Effect_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Effect* Arena::CreateMaybeMessage<::frame::proto::Effect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

// ===================================================================

class Effect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Effect) */ {
 public:
  inline Effect() : Effect(nullptr) {}
  virtual ~Effect();

  Effect(const Effect& from);
  Effect(Effect&& from) noexcept
    : Effect() {
    *this = ::std::move(from);
  }

  inline Effect& operator=(const Effect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Effect& operator=(Effect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Effect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Effect* internal_default_instance() {
    return reinterpret_cast<const Effect*>(
               &_Effect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Effect& a, Effect& b) {
    a.Swap(&b);
  }
  inline void Swap(Effect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Effect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Effect* New() const final {
    return CreateMaybeMessage<Effect>(nullptr);
  }

  Effect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Effect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Effect& from);
  void MergeFrom(const Effect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Effect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Effect";
  }
  protected:
  explicit Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Effect_2eproto);
    return ::descriptor_table_Effect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTexturesNamesFieldNumber = 2,
    kOutputTexturesNamesFieldNumber = 3,
    kParametersFieldNumber = 5,
    kNameFieldNumber = 1,
    kShaderFieldNumber = 4,
  };
  // repeated string input_textures_names = 2;
  int input_textures_names_size() const;
  private:
  int _internal_input_textures_names_size() const;
  public:
  void clear_input_textures_names();
  const std::string& input_textures_names(int index) const;
  std::string* mutable_input_textures_names(int index);
  void set_input_textures_names(int index, const std::string& value);
  void set_input_textures_names(int index, std::string&& value);
  void set_input_textures_names(int index, const char* value);
  void set_input_textures_names(int index, const char* value, size_t size);
  std::string* add_input_textures_names();
  void add_input_textures_names(const std::string& value);
  void add_input_textures_names(std::string&& value);
  void add_input_textures_names(const char* value);
  void add_input_textures_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_textures_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_textures_names();
  private:
  const std::string& _internal_input_textures_names(int index) const;
  std::string* _internal_add_input_textures_names();
  public:

  // repeated string output_textures_names = 3;
  int output_textures_names_size() const;
  private:
  int _internal_output_textures_names_size() const;
  public:
  void clear_output_textures_names();
  const std::string& output_textures_names(int index) const;
  std::string* mutable_output_textures_names(int index);
  void set_output_textures_names(int index, const std::string& value);
  void set_output_textures_names(int index, std::string&& value);
  void set_output_textures_names(int index, const char* value);
  void set_output_textures_names(int index, const char* value, size_t size);
  std::string* add_output_textures_names();
  void add_output_textures_names(const std::string& value);
  void add_output_textures_names(std::string&& value);
  void add_output_textures_names(const char* value);
  void add_output_textures_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_textures_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_textures_names();
  private:
  const std::string& _internal_output_textures_names(int index) const;
  std::string* _internal_add_output_textures_names();
  public:

  // repeated .frame.proto.Uniform parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::frame::proto::Uniform* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >*
      mutable_parameters();
  private:
  const ::frame::proto::Uniform& _internal_parameters(int index) const;
  ::frame::proto::Uniform* _internal_add_parameters();
  public:
  const ::frame::proto::Uniform& parameters(int index) const;
  ::frame::proto::Uniform* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >&
      parameters() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string shader = 4;
  void clear_shader();
  const std::string& shader() const;
  void set_shader(const std::string& value);
  void set_shader(std::string&& value);
  void set_shader(const char* value);
  void set_shader(const char* value, size_t size);
  std::string* mutable_shader();
  std::string* release_shader();
  void set_allocated_shader(std::string* shader);
  private:
  const std::string& _internal_shader() const;
  void _internal_set_shader(const std::string& value);
  std::string* _internal_mutable_shader();
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.Effect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_textures_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_textures_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Effect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Effect

// string name = 1;
inline void Effect::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Effect::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Effect.name)
  return _internal_name();
}
inline void Effect::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frame.proto.Effect.name)
}
inline std::string* Effect::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Effect.name)
  return _internal_mutable_name();
}
inline const std::string& Effect::_internal_name() const {
  return name_.Get();
}
inline void Effect::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Effect::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Effect.name)
}
inline void Effect::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Effect.name)
}
inline void Effect::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Effect.name)
}
inline std::string* Effect::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Effect::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Effect.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Effect::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Effect.name)
}

// repeated string input_textures_names = 2;
inline int Effect::_internal_input_textures_names_size() const {
  return input_textures_names_.size();
}
inline int Effect::input_textures_names_size() const {
  return _internal_input_textures_names_size();
}
inline void Effect::clear_input_textures_names() {
  input_textures_names_.Clear();
}
inline std::string* Effect::add_input_textures_names() {
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Effect.input_textures_names)
  return _internal_add_input_textures_names();
}
inline const std::string& Effect::_internal_input_textures_names(int index) const {
  return input_textures_names_.Get(index);
}
inline const std::string& Effect::input_textures_names(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Effect.input_textures_names)
  return _internal_input_textures_names(index);
}
inline std::string* Effect::mutable_input_textures_names(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Effect.input_textures_names)
  return input_textures_names_.Mutable(index);
}
inline void Effect::set_input_textures_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:frame.proto.Effect.input_textures_names)
  input_textures_names_.Mutable(index)->assign(value);
}
inline void Effect::set_input_textures_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:frame.proto.Effect.input_textures_names)
  input_textures_names_.Mutable(index)->assign(std::move(value));
}
inline void Effect::set_input_textures_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_textures_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frame.proto.Effect.input_textures_names)
}
inline void Effect::set_input_textures_names(int index, const char* value, size_t size) {
  input_textures_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Effect.input_textures_names)
}
inline std::string* Effect::_internal_add_input_textures_names() {
  return input_textures_names_.Add();
}
inline void Effect::add_input_textures_names(const std::string& value) {
  input_textures_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:frame.proto.Effect.input_textures_names)
}
inline void Effect::add_input_textures_names(std::string&& value) {
  input_textures_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:frame.proto.Effect.input_textures_names)
}
inline void Effect::add_input_textures_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_textures_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frame.proto.Effect.input_textures_names)
}
inline void Effect::add_input_textures_names(const char* value, size_t size) {
  input_textures_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frame.proto.Effect.input_textures_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Effect::input_textures_names() const {
  // @@protoc_insertion_point(field_list:frame.proto.Effect.input_textures_names)
  return input_textures_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Effect::mutable_input_textures_names() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Effect.input_textures_names)
  return &input_textures_names_;
}

// repeated string output_textures_names = 3;
inline int Effect::_internal_output_textures_names_size() const {
  return output_textures_names_.size();
}
inline int Effect::output_textures_names_size() const {
  return _internal_output_textures_names_size();
}
inline void Effect::clear_output_textures_names() {
  output_textures_names_.Clear();
}
inline std::string* Effect::add_output_textures_names() {
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Effect.output_textures_names)
  return _internal_add_output_textures_names();
}
inline const std::string& Effect::_internal_output_textures_names(int index) const {
  return output_textures_names_.Get(index);
}
inline const std::string& Effect::output_textures_names(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Effect.output_textures_names)
  return _internal_output_textures_names(index);
}
inline std::string* Effect::mutable_output_textures_names(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Effect.output_textures_names)
  return output_textures_names_.Mutable(index);
}
inline void Effect::set_output_textures_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:frame.proto.Effect.output_textures_names)
  output_textures_names_.Mutable(index)->assign(value);
}
inline void Effect::set_output_textures_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:frame.proto.Effect.output_textures_names)
  output_textures_names_.Mutable(index)->assign(std::move(value));
}
inline void Effect::set_output_textures_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_textures_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frame.proto.Effect.output_textures_names)
}
inline void Effect::set_output_textures_names(int index, const char* value, size_t size) {
  output_textures_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Effect.output_textures_names)
}
inline std::string* Effect::_internal_add_output_textures_names() {
  return output_textures_names_.Add();
}
inline void Effect::add_output_textures_names(const std::string& value) {
  output_textures_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:frame.proto.Effect.output_textures_names)
}
inline void Effect::add_output_textures_names(std::string&& value) {
  output_textures_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:frame.proto.Effect.output_textures_names)
}
inline void Effect::add_output_textures_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_textures_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frame.proto.Effect.output_textures_names)
}
inline void Effect::add_output_textures_names(const char* value, size_t size) {
  output_textures_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frame.proto.Effect.output_textures_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Effect::output_textures_names() const {
  // @@protoc_insertion_point(field_list:frame.proto.Effect.output_textures_names)
  return output_textures_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Effect::mutable_output_textures_names() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Effect.output_textures_names)
  return &output_textures_names_;
}

// string shader = 4;
inline void Effect::clear_shader() {
  shader_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Effect::shader() const {
  // @@protoc_insertion_point(field_get:frame.proto.Effect.shader)
  return _internal_shader();
}
inline void Effect::set_shader(const std::string& value) {
  _internal_set_shader(value);
  // @@protoc_insertion_point(field_set:frame.proto.Effect.shader)
}
inline std::string* Effect::mutable_shader() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Effect.shader)
  return _internal_mutable_shader();
}
inline const std::string& Effect::_internal_shader() const {
  return shader_.Get();
}
inline void Effect::_internal_set_shader(const std::string& value) {
  
  shader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Effect::set_shader(std::string&& value) {
  
  shader_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Effect.shader)
}
inline void Effect::set_shader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Effect.shader)
}
inline void Effect::set_shader(const char* value,
    size_t size) {
  
  shader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Effect.shader)
}
inline std::string* Effect::_internal_mutable_shader() {
  
  return shader_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Effect::release_shader() {
  // @@protoc_insertion_point(field_release:frame.proto.Effect.shader)
  return shader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Effect::set_allocated_shader(std::string* shader) {
  if (shader != nullptr) {
    
  } else {
    
  }
  shader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Effect.shader)
}

// repeated .frame.proto.Uniform parameters = 5;
inline int Effect::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Effect::parameters_size() const {
  return _internal_parameters_size();
}
inline ::frame::proto::Uniform* Effect::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Effect.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >*
Effect::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Effect.parameters)
  return &parameters_;
}
inline const ::frame::proto::Uniform& Effect::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::frame::proto::Uniform& Effect::parameters(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Effect.parameters)
  return _internal_parameters(index);
}
inline ::frame::proto::Uniform* Effect::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::frame::proto::Uniform* Effect::add_parameters() {
  // @@protoc_insertion_point(field_add:frame.proto.Effect.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Uniform >&
Effect::parameters() const {
  // @@protoc_insertion_point(field_list:frame.proto.Effect.parameters)
  return parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Effect_2eproto
