// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Display.proto

#include "Display.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Effect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Effect_Effect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Texture_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Texture_Texture_2eproto;
namespace frame {
namespace proto {
class DisplayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Display> _instance;
} _Display_default_instance_;
}  // namespace proto
}  // namespace frame
static void InitDefaultsscc_info_Display_Display_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::proto::_Display_default_instance_;
    new (ptr) ::frame::proto::Display();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::proto::Display::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Display_Display_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Display_Display_2eproto}, {
      &scc_info_Texture_Texture_2eproto.base,
      &scc_info_Effect_Effect_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Display_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Display_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Display_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Display_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::proto::Display, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::proto::Display, in_textures_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Display, out_textures_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Display, textures_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Display, effects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frame::proto::Display)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::proto::_Display_default_instance_),
};

const char descriptor_table_protodef_Display_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rDisplay.proto\022\013frame.proto\032\rTexture.pr"
  "oto\032\014Effect.proto\"\202\001\n\007Display\022\023\n\013in_text"
  "ures\030\001 \003(\t\022\024\n\014out_textures\030\002 \003(\t\022&\n\010text"
  "ures\030\n \003(\0132\024.frame.proto.Texture\022$\n\007effe"
  "cts\030\013 \003(\0132\023.frame.proto.Effectb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Display_2eproto_deps[2] = {
  &::descriptor_table_Effect_2eproto,
  &::descriptor_table_Texture_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Display_2eproto_sccs[1] = {
  &scc_info_Display_Display_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Display_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Display_2eproto = {
  false, false, descriptor_table_protodef_Display_2eproto, "Display.proto", 198,
  &descriptor_table_Display_2eproto_once, descriptor_table_Display_2eproto_sccs, descriptor_table_Display_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Display_2eproto::offsets,
  file_level_metadata_Display_2eproto, 1, file_level_enum_descriptors_Display_2eproto, file_level_service_descriptors_Display_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Display_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Display_2eproto)), true);
namespace frame {
namespace proto {

// ===================================================================

void Display::InitAsDefaultInstance() {
}
class Display::_Internal {
 public:
};

void Display::clear_textures() {
  textures_.Clear();
}
void Display::clear_effects() {
  effects_.Clear();
}
Display::Display(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  in_textures_(arena),
  out_textures_(arena),
  textures_(arena),
  effects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frame.proto.Display)
}
Display::Display(const Display& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      in_textures_(from.in_textures_),
      out_textures_(from.out_textures_),
      textures_(from.textures_),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frame.proto.Display)
}

void Display::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Display_Display_2eproto.base);
}

Display::~Display() {
  // @@protoc_insertion_point(destructor:frame.proto.Display)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Display::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Display::ArenaDtor(void* object) {
  Display* _this = reinterpret_cast< Display* >(object);
  (void)_this;
}
void Display::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Display::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Display& Display::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Display_Display_2eproto.base);
  return *internal_default_instance();
}


void Display::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.proto.Display)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_textures_.Clear();
  out_textures_.Clear();
  textures_.Clear();
  effects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Display::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string in_textures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_in_textures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.proto.Display.in_textures"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string out_textures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_out_textures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.proto.Display.out_textures"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .frame.proto.Texture textures = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .frame.proto.Effect effects = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Display::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.proto.Display)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string in_textures = 1;
  for (int i = 0, n = this->_internal_in_textures_size(); i < n; i++) {
    const auto& s = this->_internal_in_textures(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.proto.Display.in_textures");
    target = stream->WriteString(1, s, target);
  }

  // repeated string out_textures = 2;
  for (int i = 0, n = this->_internal_out_textures_size(); i < n; i++) {
    const auto& s = this->_internal_out_textures(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.proto.Display.out_textures");
    target = stream->WriteString(2, s, target);
  }

  // repeated .frame.proto.Texture textures = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_textures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_textures(i), target, stream);
  }

  // repeated .frame.proto.Effect effects = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_effects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.proto.Display)
  return target;
}

size_t Display::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.proto.Display)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string in_textures = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(in_textures_.size());
  for (int i = 0, n = in_textures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      in_textures_.Get(i));
  }

  // repeated string out_textures = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(out_textures_.size());
  for (int i = 0, n = out_textures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      out_textures_.Get(i));
  }

  // repeated .frame.proto.Texture textures = 10;
  total_size += 1UL * this->_internal_textures_size();
  for (const auto& msg : this->textures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .frame.proto.Effect effects = 11;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Display::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.proto.Display)
  GOOGLE_DCHECK_NE(&from, this);
  const Display* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Display>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.proto.Display)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.proto.Display)
    MergeFrom(*source);
  }
}

void Display::MergeFrom(const Display& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.proto.Display)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_textures_.MergeFrom(from.in_textures_);
  out_textures_.MergeFrom(from.out_textures_);
  textures_.MergeFrom(from.textures_);
  effects_.MergeFrom(from.effects_);
}

void Display::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.proto.Display)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Display::CopyFrom(const Display& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.proto.Display)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Display::IsInitialized() const {
  return true;
}

void Display::InternalSwap(Display* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  in_textures_.InternalSwap(&other->in_textures_);
  out_textures_.InternalSwap(&other->out_textures_);
  textures_.InternalSwap(&other->textures_);
  effects_.InternalSwap(&other->effects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Display::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frame::proto::Display* Arena::CreateMaybeMessage< ::frame::proto::Display >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frame::proto::Display >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
