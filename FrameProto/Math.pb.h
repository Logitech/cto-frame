// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Math.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Math_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Math_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Math_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Math_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Math_2eproto;
namespace frame {
namespace proto {
class UniformBools;
class UniformBoolsDefaultTypeInternal;
extern UniformBoolsDefaultTypeInternal _UniformBools_default_instance_;
class UniformFloats;
class UniformFloatsDefaultTypeInternal;
extern UniformFloatsDefaultTypeInternal _UniformFloats_default_instance_;
class UniformInts;
class UniformIntsDefaultTypeInternal;
extern UniformIntsDefaultTypeInternal _UniformInts_default_instance_;
class UniformMatrix4;
class UniformMatrix4DefaultTypeInternal;
extern UniformMatrix4DefaultTypeInternal _UniformMatrix4_default_instance_;
class UniformMatrix4s;
class UniformMatrix4sDefaultTypeInternal;
extern UniformMatrix4sDefaultTypeInternal _UniformMatrix4s_default_instance_;
class UniformVector2;
class UniformVector2DefaultTypeInternal;
extern UniformVector2DefaultTypeInternal _UniformVector2_default_instance_;
class UniformVector2s;
class UniformVector2sDefaultTypeInternal;
extern UniformVector2sDefaultTypeInternal _UniformVector2s_default_instance_;
class UniformVector3;
class UniformVector3DefaultTypeInternal;
extern UniformVector3DefaultTypeInternal _UniformVector3_default_instance_;
class UniformVector3s;
class UniformVector3sDefaultTypeInternal;
extern UniformVector3sDefaultTypeInternal _UniformVector3s_default_instance_;
class UniformVector4;
class UniformVector4DefaultTypeInternal;
extern UniformVector4DefaultTypeInternal _UniformVector4_default_instance_;
class UniformVector4s;
class UniformVector4sDefaultTypeInternal;
extern UniformVector4sDefaultTypeInternal _UniformVector4s_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::UniformBools* Arena::CreateMaybeMessage<::frame::proto::UniformBools>(Arena*);
template<> ::frame::proto::UniformFloats* Arena::CreateMaybeMessage<::frame::proto::UniformFloats>(Arena*);
template<> ::frame::proto::UniformInts* Arena::CreateMaybeMessage<::frame::proto::UniformInts>(Arena*);
template<> ::frame::proto::UniformMatrix4* Arena::CreateMaybeMessage<::frame::proto::UniformMatrix4>(Arena*);
template<> ::frame::proto::UniformMatrix4s* Arena::CreateMaybeMessage<::frame::proto::UniformMatrix4s>(Arena*);
template<> ::frame::proto::UniformVector2* Arena::CreateMaybeMessage<::frame::proto::UniformVector2>(Arena*);
template<> ::frame::proto::UniformVector2s* Arena::CreateMaybeMessage<::frame::proto::UniformVector2s>(Arena*);
template<> ::frame::proto::UniformVector3* Arena::CreateMaybeMessage<::frame::proto::UniformVector3>(Arena*);
template<> ::frame::proto::UniformVector3s* Arena::CreateMaybeMessage<::frame::proto::UniformVector3s>(Arena*);
template<> ::frame::proto::UniformVector4* Arena::CreateMaybeMessage<::frame::proto::UniformVector4>(Arena*);
template<> ::frame::proto::UniformVector4s* Arena::CreateMaybeMessage<::frame::proto::UniformVector4s>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

// ===================================================================

class UniformVector2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformVector2) */ {
 public:
  inline UniformVector2() : UniformVector2(nullptr) {}
  virtual ~UniformVector2();

  UniformVector2(const UniformVector2& from);
  UniformVector2(UniformVector2&& from) noexcept
    : UniformVector2() {
    *this = ::std::move(from);
  }

  inline UniformVector2& operator=(const UniformVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformVector2& operator=(UniformVector2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformVector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformVector2* internal_default_instance() {
    return reinterpret_cast<const UniformVector2*>(
               &_UniformVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UniformVector2& a, UniformVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformVector2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformVector2* New() const final {
    return CreateMaybeMessage<UniformVector2>(nullptr);
  }

  UniformVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformVector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformVector2& from);
  void MergeFrom(const UniformVector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformVector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformVector2";
  }
  protected:
  explicit UniformVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.UniformVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformVector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformVector3) */ {
 public:
  inline UniformVector3() : UniformVector3(nullptr) {}
  virtual ~UniformVector3();

  UniformVector3(const UniformVector3& from);
  UniformVector3(UniformVector3&& from) noexcept
    : UniformVector3() {
    *this = ::std::move(from);
  }

  inline UniformVector3& operator=(const UniformVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformVector3& operator=(UniformVector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformVector3* internal_default_instance() {
    return reinterpret_cast<const UniformVector3*>(
               &_UniformVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UniformVector3& a, UniformVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformVector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformVector3* New() const final {
    return CreateMaybeMessage<UniformVector3>(nullptr);
  }

  UniformVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformVector3& from);
  void MergeFrom(const UniformVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformVector3";
  }
  protected:
  explicit UniformVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.UniformVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformVector4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformVector4) */ {
 public:
  inline UniformVector4() : UniformVector4(nullptr) {}
  virtual ~UniformVector4();

  UniformVector4(const UniformVector4& from);
  UniformVector4(UniformVector4&& from) noexcept
    : UniformVector4() {
    *this = ::std::move(from);
  }

  inline UniformVector4& operator=(const UniformVector4& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformVector4& operator=(UniformVector4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformVector4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformVector4* internal_default_instance() {
    return reinterpret_cast<const UniformVector4*>(
               &_UniformVector4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UniformVector4& a, UniformVector4& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformVector4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformVector4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformVector4* New() const final {
    return CreateMaybeMessage<UniformVector4>(nullptr);
  }

  UniformVector4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformVector4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformVector4& from);
  void MergeFrom(const UniformVector4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformVector4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformVector4";
  }
  protected:
  explicit UniformVector4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.UniformVector4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformMatrix4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformMatrix4) */ {
 public:
  inline UniformMatrix4() : UniformMatrix4(nullptr) {}
  virtual ~UniformMatrix4();

  UniformMatrix4(const UniformMatrix4& from);
  UniformMatrix4(UniformMatrix4&& from) noexcept
    : UniformMatrix4() {
    *this = ::std::move(from);
  }

  inline UniformMatrix4& operator=(const UniformMatrix4& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformMatrix4& operator=(UniformMatrix4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformMatrix4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformMatrix4* internal_default_instance() {
    return reinterpret_cast<const UniformMatrix4*>(
               &_UniformMatrix4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UniformMatrix4& a, UniformMatrix4& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformMatrix4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformMatrix4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformMatrix4* New() const final {
    return CreateMaybeMessage<UniformMatrix4>(nullptr);
  }

  UniformMatrix4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformMatrix4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformMatrix4& from);
  void MergeFrom(const UniformMatrix4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformMatrix4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformMatrix4";
  }
  protected:
  explicit UniformMatrix4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 11,
    kM12FieldNumber = 12,
    kM13FieldNumber = 13,
    kM14FieldNumber = 14,
    kM21FieldNumber = 21,
    kM22FieldNumber = 22,
    kM23FieldNumber = 23,
    kM24FieldNumber = 24,
    kM31FieldNumber = 31,
    kM32FieldNumber = 32,
    kM33FieldNumber = 33,
    kM34FieldNumber = 34,
    kM41FieldNumber = 41,
    kM42FieldNumber = 42,
    kM43FieldNumber = 43,
    kM44FieldNumber = 44,
  };
  // float m11 = 11;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 12;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 13;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m14 = 14;
  void clear_m14();
  float m14() const;
  void set_m14(float value);
  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);
  public:

  // float m21 = 21;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 22;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 23;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m24 = 24;
  void clear_m24();
  float m24() const;
  void set_m24(float value);
  private:
  float _internal_m24() const;
  void _internal_set_m24(float value);
  public:

  // float m31 = 31;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 32;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 33;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // float m34 = 34;
  void clear_m34();
  float m34() const;
  void set_m34(float value);
  private:
  float _internal_m34() const;
  void _internal_set_m34(float value);
  public:

  // float m41 = 41;
  void clear_m41();
  float m41() const;
  void set_m41(float value);
  private:
  float _internal_m41() const;
  void _internal_set_m41(float value);
  public:

  // float m42 = 42;
  void clear_m42();
  float m42() const;
  void set_m42(float value);
  private:
  float _internal_m42() const;
  void _internal_set_m42(float value);
  public:

  // float m43 = 43;
  void clear_m43();
  float m43() const;
  void set_m43(float value);
  private:
  float _internal_m43() const;
  void _internal_set_m43(float value);
  public:

  // float m44 = 44;
  void clear_m44();
  float m44() const;
  void set_m44(float value);
  private:
  float _internal_m44() const;
  void _internal_set_m44(float value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.UniformMatrix4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float m11_;
  float m12_;
  float m13_;
  float m14_;
  float m21_;
  float m22_;
  float m23_;
  float m24_;
  float m31_;
  float m32_;
  float m33_;
  float m34_;
  float m41_;
  float m42_;
  float m43_;
  float m44_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformInts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformInts) */ {
 public:
  inline UniformInts() : UniformInts(nullptr) {}
  virtual ~UniformInts();

  UniformInts(const UniformInts& from);
  UniformInts(UniformInts&& from) noexcept
    : UniformInts() {
    *this = ::std::move(from);
  }

  inline UniformInts& operator=(const UniformInts& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformInts& operator=(UniformInts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformInts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformInts* internal_default_instance() {
    return reinterpret_cast<const UniformInts*>(
               &_UniformInts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UniformInts& a, UniformInts& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformInts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformInts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformInts* New() const final {
    return CreateMaybeMessage<UniformInts>(nullptr);
  }

  UniformInts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformInts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformInts& from);
  void MergeFrom(const UniformInts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformInts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformInts";
  }
  protected:
  explicit UniformInts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:frame.proto.UniformInts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformBools PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformBools) */ {
 public:
  inline UniformBools() : UniformBools(nullptr) {}
  virtual ~UniformBools();

  UniformBools(const UniformBools& from);
  UniformBools(UniformBools&& from) noexcept
    : UniformBools() {
    *this = ::std::move(from);
  }

  inline UniformBools& operator=(const UniformBools& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformBools& operator=(UniformBools&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformBools& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformBools* internal_default_instance() {
    return reinterpret_cast<const UniformBools*>(
               &_UniformBools_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UniformBools& a, UniformBools& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformBools* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformBools* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformBools* New() const final {
    return CreateMaybeMessage<UniformBools>(nullptr);
  }

  UniformBools* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformBools>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformBools& from);
  void MergeFrom(const UniformBools& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformBools* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformBools";
  }
  protected:
  explicit UniformBools(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bool values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  bool _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_values() const;
  void _internal_add_values(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_values();
  public:
  bool values(int index) const;
  void set_values(int index, bool value);
  void add_values(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:frame.proto.UniformBools)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformFloats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformFloats) */ {
 public:
  inline UniformFloats() : UniformFloats(nullptr) {}
  virtual ~UniformFloats();

  UniformFloats(const UniformFloats& from);
  UniformFloats(UniformFloats&& from) noexcept
    : UniformFloats() {
    *this = ::std::move(from);
  }

  inline UniformFloats& operator=(const UniformFloats& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformFloats& operator=(UniformFloats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformFloats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformFloats* internal_default_instance() {
    return reinterpret_cast<const UniformFloats*>(
               &_UniformFloats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UniformFloats& a, UniformFloats& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformFloats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformFloats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformFloats* New() const final {
    return CreateMaybeMessage<UniformFloats>(nullptr);
  }

  UniformFloats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformFloats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformFloats& from);
  void MergeFrom(const UniformFloats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformFloats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformFloats";
  }
  protected:
  explicit UniformFloats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:frame.proto.UniformFloats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformVector2s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformVector2s) */ {
 public:
  inline UniformVector2s() : UniformVector2s(nullptr) {}
  virtual ~UniformVector2s();

  UniformVector2s(const UniformVector2s& from);
  UniformVector2s(UniformVector2s&& from) noexcept
    : UniformVector2s() {
    *this = ::std::move(from);
  }

  inline UniformVector2s& operator=(const UniformVector2s& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformVector2s& operator=(UniformVector2s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformVector2s& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformVector2s* internal_default_instance() {
    return reinterpret_cast<const UniformVector2s*>(
               &_UniformVector2s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UniformVector2s& a, UniformVector2s& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformVector2s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformVector2s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformVector2s* New() const final {
    return CreateMaybeMessage<UniformVector2s>(nullptr);
  }

  UniformVector2s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformVector2s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformVector2s& from);
  void MergeFrom(const UniformVector2s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformVector2s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformVector2s";
  }
  protected:
  explicit UniformVector2s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .frame.proto.UniformVector2 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::frame::proto::UniformVector2* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector2 >*
      mutable_values();
  private:
  const ::frame::proto::UniformVector2& _internal_values(int index) const;
  ::frame::proto::UniformVector2* _internal_add_values();
  public:
  const ::frame::proto::UniformVector2& values(int index) const;
  ::frame::proto::UniformVector2* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector2 >&
      values() const;

  // @@protoc_insertion_point(class_scope:frame.proto.UniformVector2s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector2 > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformVector3s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformVector3s) */ {
 public:
  inline UniformVector3s() : UniformVector3s(nullptr) {}
  virtual ~UniformVector3s();

  UniformVector3s(const UniformVector3s& from);
  UniformVector3s(UniformVector3s&& from) noexcept
    : UniformVector3s() {
    *this = ::std::move(from);
  }

  inline UniformVector3s& operator=(const UniformVector3s& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformVector3s& operator=(UniformVector3s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformVector3s& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformVector3s* internal_default_instance() {
    return reinterpret_cast<const UniformVector3s*>(
               &_UniformVector3s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UniformVector3s& a, UniformVector3s& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformVector3s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformVector3s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformVector3s* New() const final {
    return CreateMaybeMessage<UniformVector3s>(nullptr);
  }

  UniformVector3s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformVector3s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformVector3s& from);
  void MergeFrom(const UniformVector3s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformVector3s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformVector3s";
  }
  protected:
  explicit UniformVector3s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .frame.proto.UniformVector3 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::frame::proto::UniformVector3* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector3 >*
      mutable_values();
  private:
  const ::frame::proto::UniformVector3& _internal_values(int index) const;
  ::frame::proto::UniformVector3* _internal_add_values();
  public:
  const ::frame::proto::UniformVector3& values(int index) const;
  ::frame::proto::UniformVector3* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector3 >&
      values() const;

  // @@protoc_insertion_point(class_scope:frame.proto.UniformVector3s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector3 > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformVector4s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformVector4s) */ {
 public:
  inline UniformVector4s() : UniformVector4s(nullptr) {}
  virtual ~UniformVector4s();

  UniformVector4s(const UniformVector4s& from);
  UniformVector4s(UniformVector4s&& from) noexcept
    : UniformVector4s() {
    *this = ::std::move(from);
  }

  inline UniformVector4s& operator=(const UniformVector4s& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformVector4s& operator=(UniformVector4s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformVector4s& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformVector4s* internal_default_instance() {
    return reinterpret_cast<const UniformVector4s*>(
               &_UniformVector4s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UniformVector4s& a, UniformVector4s& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformVector4s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformVector4s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformVector4s* New() const final {
    return CreateMaybeMessage<UniformVector4s>(nullptr);
  }

  UniformVector4s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformVector4s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformVector4s& from);
  void MergeFrom(const UniformVector4s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformVector4s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformVector4s";
  }
  protected:
  explicit UniformVector4s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .frame.proto.UniformVector4 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::frame::proto::UniformVector4* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector4 >*
      mutable_values();
  private:
  const ::frame::proto::UniformVector4& _internal_values(int index) const;
  ::frame::proto::UniformVector4* _internal_add_values();
  public:
  const ::frame::proto::UniformVector4& values(int index) const;
  ::frame::proto::UniformVector4* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector4 >&
      values() const;

  // @@protoc_insertion_point(class_scope:frame.proto.UniformVector4s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector4 > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// -------------------------------------------------------------------

class UniformMatrix4s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.UniformMatrix4s) */ {
 public:
  inline UniformMatrix4s() : UniformMatrix4s(nullptr) {}
  virtual ~UniformMatrix4s();

  UniformMatrix4s(const UniformMatrix4s& from);
  UniformMatrix4s(UniformMatrix4s&& from) noexcept
    : UniformMatrix4s() {
    *this = ::std::move(from);
  }

  inline UniformMatrix4s& operator=(const UniformMatrix4s& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformMatrix4s& operator=(UniformMatrix4s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformMatrix4s& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformMatrix4s* internal_default_instance() {
    return reinterpret_cast<const UniformMatrix4s*>(
               &_UniformMatrix4s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UniformMatrix4s& a, UniformMatrix4s& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformMatrix4s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformMatrix4s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformMatrix4s* New() const final {
    return CreateMaybeMessage<UniformMatrix4s>(nullptr);
  }

  UniformMatrix4s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformMatrix4s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformMatrix4s& from);
  void MergeFrom(const UniformMatrix4s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformMatrix4s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.UniformMatrix4s";
  }
  protected:
  explicit UniformMatrix4s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Math_2eproto);
    return ::descriptor_table_Math_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .frame.proto.UniformMatrix4 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::frame::proto::UniformMatrix4* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformMatrix4 >*
      mutable_values();
  private:
  const ::frame::proto::UniformMatrix4& _internal_values(int index) const;
  ::frame::proto::UniformMatrix4* _internal_add_values();
  public:
  const ::frame::proto::UniformMatrix4& values(int index) const;
  ::frame::proto::UniformMatrix4* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformMatrix4 >&
      values() const;

  // @@protoc_insertion_point(class_scope:frame.proto.UniformMatrix4s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformMatrix4 > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Math_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UniformVector2

// float x = 1;
inline void UniformVector2::clear_x() {
  x_ = 0;
}
inline float UniformVector2::_internal_x() const {
  return x_;
}
inline float UniformVector2::x() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector2.x)
  return _internal_x();
}
inline void UniformVector2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UniformVector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector2.x)
}

// float y = 2;
inline void UniformVector2::clear_y() {
  y_ = 0;
}
inline float UniformVector2::_internal_y() const {
  return y_;
}
inline float UniformVector2::y() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector2.y)
  return _internal_y();
}
inline void UniformVector2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UniformVector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector2.y)
}

// -------------------------------------------------------------------

// UniformVector3

// float x = 1;
inline void UniformVector3::clear_x() {
  x_ = 0;
}
inline float UniformVector3::_internal_x() const {
  return x_;
}
inline float UniformVector3::x() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector3.x)
  return _internal_x();
}
inline void UniformVector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UniformVector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector3.x)
}

// float y = 2;
inline void UniformVector3::clear_y() {
  y_ = 0;
}
inline float UniformVector3::_internal_y() const {
  return y_;
}
inline float UniformVector3::y() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector3.y)
  return _internal_y();
}
inline void UniformVector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UniformVector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector3.y)
}

// float z = 3;
inline void UniformVector3::clear_z() {
  z_ = 0;
}
inline float UniformVector3::_internal_z() const {
  return z_;
}
inline float UniformVector3::z() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector3.z)
  return _internal_z();
}
inline void UniformVector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void UniformVector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector3.z)
}

// -------------------------------------------------------------------

// UniformVector4

// float x = 1;
inline void UniformVector4::clear_x() {
  x_ = 0;
}
inline float UniformVector4::_internal_x() const {
  return x_;
}
inline float UniformVector4::x() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector4.x)
  return _internal_x();
}
inline void UniformVector4::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UniformVector4::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector4.x)
}

// float y = 2;
inline void UniformVector4::clear_y() {
  y_ = 0;
}
inline float UniformVector4::_internal_y() const {
  return y_;
}
inline float UniformVector4::y() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector4.y)
  return _internal_y();
}
inline void UniformVector4::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UniformVector4::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector4.y)
}

// float z = 3;
inline void UniformVector4::clear_z() {
  z_ = 0;
}
inline float UniformVector4::_internal_z() const {
  return z_;
}
inline float UniformVector4::z() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector4.z)
  return _internal_z();
}
inline void UniformVector4::_internal_set_z(float value) {
  
  z_ = value;
}
inline void UniformVector4::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector4.z)
}

// float w = 4;
inline void UniformVector4::clear_w() {
  w_ = 0;
}
inline float UniformVector4::_internal_w() const {
  return w_;
}
inline float UniformVector4::w() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector4.w)
  return _internal_w();
}
inline void UniformVector4::_internal_set_w(float value) {
  
  w_ = value;
}
inline void UniformVector4::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformVector4.w)
}

// -------------------------------------------------------------------

// UniformMatrix4

// float m11 = 11;
inline void UniformMatrix4::clear_m11() {
  m11_ = 0;
}
inline float UniformMatrix4::_internal_m11() const {
  return m11_;
}
inline float UniformMatrix4::m11() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m11)
  return _internal_m11();
}
inline void UniformMatrix4::_internal_set_m11(float value) {
  
  m11_ = value;
}
inline void UniformMatrix4::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m11)
}

// float m12 = 12;
inline void UniformMatrix4::clear_m12() {
  m12_ = 0;
}
inline float UniformMatrix4::_internal_m12() const {
  return m12_;
}
inline float UniformMatrix4::m12() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m12)
  return _internal_m12();
}
inline void UniformMatrix4::_internal_set_m12(float value) {
  
  m12_ = value;
}
inline void UniformMatrix4::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m12)
}

// float m13 = 13;
inline void UniformMatrix4::clear_m13() {
  m13_ = 0;
}
inline float UniformMatrix4::_internal_m13() const {
  return m13_;
}
inline float UniformMatrix4::m13() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m13)
  return _internal_m13();
}
inline void UniformMatrix4::_internal_set_m13(float value) {
  
  m13_ = value;
}
inline void UniformMatrix4::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m13)
}

// float m14 = 14;
inline void UniformMatrix4::clear_m14() {
  m14_ = 0;
}
inline float UniformMatrix4::_internal_m14() const {
  return m14_;
}
inline float UniformMatrix4::m14() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m14)
  return _internal_m14();
}
inline void UniformMatrix4::_internal_set_m14(float value) {
  
  m14_ = value;
}
inline void UniformMatrix4::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m14)
}

// float m21 = 21;
inline void UniformMatrix4::clear_m21() {
  m21_ = 0;
}
inline float UniformMatrix4::_internal_m21() const {
  return m21_;
}
inline float UniformMatrix4::m21() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m21)
  return _internal_m21();
}
inline void UniformMatrix4::_internal_set_m21(float value) {
  
  m21_ = value;
}
inline void UniformMatrix4::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m21)
}

// float m22 = 22;
inline void UniformMatrix4::clear_m22() {
  m22_ = 0;
}
inline float UniformMatrix4::_internal_m22() const {
  return m22_;
}
inline float UniformMatrix4::m22() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m22)
  return _internal_m22();
}
inline void UniformMatrix4::_internal_set_m22(float value) {
  
  m22_ = value;
}
inline void UniformMatrix4::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m22)
}

// float m23 = 23;
inline void UniformMatrix4::clear_m23() {
  m23_ = 0;
}
inline float UniformMatrix4::_internal_m23() const {
  return m23_;
}
inline float UniformMatrix4::m23() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m23)
  return _internal_m23();
}
inline void UniformMatrix4::_internal_set_m23(float value) {
  
  m23_ = value;
}
inline void UniformMatrix4::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m23)
}

// float m24 = 24;
inline void UniformMatrix4::clear_m24() {
  m24_ = 0;
}
inline float UniformMatrix4::_internal_m24() const {
  return m24_;
}
inline float UniformMatrix4::m24() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m24)
  return _internal_m24();
}
inline void UniformMatrix4::_internal_set_m24(float value) {
  
  m24_ = value;
}
inline void UniformMatrix4::set_m24(float value) {
  _internal_set_m24(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m24)
}

// float m31 = 31;
inline void UniformMatrix4::clear_m31() {
  m31_ = 0;
}
inline float UniformMatrix4::_internal_m31() const {
  return m31_;
}
inline float UniformMatrix4::m31() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m31)
  return _internal_m31();
}
inline void UniformMatrix4::_internal_set_m31(float value) {
  
  m31_ = value;
}
inline void UniformMatrix4::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m31)
}

// float m32 = 32;
inline void UniformMatrix4::clear_m32() {
  m32_ = 0;
}
inline float UniformMatrix4::_internal_m32() const {
  return m32_;
}
inline float UniformMatrix4::m32() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m32)
  return _internal_m32();
}
inline void UniformMatrix4::_internal_set_m32(float value) {
  
  m32_ = value;
}
inline void UniformMatrix4::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m32)
}

// float m33 = 33;
inline void UniformMatrix4::clear_m33() {
  m33_ = 0;
}
inline float UniformMatrix4::_internal_m33() const {
  return m33_;
}
inline float UniformMatrix4::m33() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m33)
  return _internal_m33();
}
inline void UniformMatrix4::_internal_set_m33(float value) {
  
  m33_ = value;
}
inline void UniformMatrix4::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m33)
}

// float m34 = 34;
inline void UniformMatrix4::clear_m34() {
  m34_ = 0;
}
inline float UniformMatrix4::_internal_m34() const {
  return m34_;
}
inline float UniformMatrix4::m34() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m34)
  return _internal_m34();
}
inline void UniformMatrix4::_internal_set_m34(float value) {
  
  m34_ = value;
}
inline void UniformMatrix4::set_m34(float value) {
  _internal_set_m34(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m34)
}

// float m41 = 41;
inline void UniformMatrix4::clear_m41() {
  m41_ = 0;
}
inline float UniformMatrix4::_internal_m41() const {
  return m41_;
}
inline float UniformMatrix4::m41() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m41)
  return _internal_m41();
}
inline void UniformMatrix4::_internal_set_m41(float value) {
  
  m41_ = value;
}
inline void UniformMatrix4::set_m41(float value) {
  _internal_set_m41(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m41)
}

// float m42 = 42;
inline void UniformMatrix4::clear_m42() {
  m42_ = 0;
}
inline float UniformMatrix4::_internal_m42() const {
  return m42_;
}
inline float UniformMatrix4::m42() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m42)
  return _internal_m42();
}
inline void UniformMatrix4::_internal_set_m42(float value) {
  
  m42_ = value;
}
inline void UniformMatrix4::set_m42(float value) {
  _internal_set_m42(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m42)
}

// float m43 = 43;
inline void UniformMatrix4::clear_m43() {
  m43_ = 0;
}
inline float UniformMatrix4::_internal_m43() const {
  return m43_;
}
inline float UniformMatrix4::m43() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m43)
  return _internal_m43();
}
inline void UniformMatrix4::_internal_set_m43(float value) {
  
  m43_ = value;
}
inline void UniformMatrix4::set_m43(float value) {
  _internal_set_m43(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m43)
}

// float m44 = 44;
inline void UniformMatrix4::clear_m44() {
  m44_ = 0;
}
inline float UniformMatrix4::_internal_m44() const {
  return m44_;
}
inline float UniformMatrix4::m44() const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4.m44)
  return _internal_m44();
}
inline void UniformMatrix4::_internal_set_m44(float value) {
  
  m44_ = value;
}
inline void UniformMatrix4::set_m44(float value) {
  _internal_set_m44(value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformMatrix4.m44)
}

// -------------------------------------------------------------------

// UniformInts

// repeated int32 values = 1;
inline int UniformInts::_internal_values_size() const {
  return values_.size();
}
inline int UniformInts::values_size() const {
  return _internal_values_size();
}
inline void UniformInts::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniformInts::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UniformInts::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformInts.values)
  return _internal_values(index);
}
inline void UniformInts::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformInts.values)
}
inline void UniformInts::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void UniformInts::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:frame.proto.UniformInts.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UniformInts::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UniformInts::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.UniformInts.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UniformInts::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UniformInts::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.UniformInts.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// UniformBools

// repeated bool values = 1;
inline int UniformBools::_internal_values_size() const {
  return values_.size();
}
inline int UniformBools::values_size() const {
  return _internal_values_size();
}
inline void UniformBools::clear_values() {
  values_.Clear();
}
inline bool UniformBools::_internal_values(int index) const {
  return values_.Get(index);
}
inline bool UniformBools::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformBools.values)
  return _internal_values(index);
}
inline void UniformBools::set_values(int index, bool value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformBools.values)
}
inline void UniformBools::_internal_add_values(bool value) {
  values_.Add(value);
}
inline void UniformBools::add_values(bool value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:frame.proto.UniformBools.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
UniformBools::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
UniformBools::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.UniformBools.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
UniformBools::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
UniformBools::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.UniformBools.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// UniformFloats

// repeated float values = 1;
inline int UniformFloats::_internal_values_size() const {
  return values_.size();
}
inline int UniformFloats::values_size() const {
  return _internal_values_size();
}
inline void UniformFloats::clear_values() {
  values_.Clear();
}
inline float UniformFloats::_internal_values(int index) const {
  return values_.Get(index);
}
inline float UniformFloats::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformFloats.values)
  return _internal_values(index);
}
inline void UniformFloats::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:frame.proto.UniformFloats.values)
}
inline void UniformFloats::_internal_add_values(float value) {
  values_.Add(value);
}
inline void UniformFloats::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:frame.proto.UniformFloats.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UniformFloats::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UniformFloats::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.UniformFloats.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UniformFloats::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UniformFloats::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.UniformFloats.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// UniformVector2s

// repeated .frame.proto.UniformVector2 values = 1;
inline int UniformVector2s::_internal_values_size() const {
  return values_.size();
}
inline int UniformVector2s::values_size() const {
  return _internal_values_size();
}
inline void UniformVector2s::clear_values() {
  values_.Clear();
}
inline ::frame::proto::UniformVector2* UniformVector2s::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.UniformVector2s.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector2 >*
UniformVector2s::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.UniformVector2s.values)
  return &values_;
}
inline const ::frame::proto::UniformVector2& UniformVector2s::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::frame::proto::UniformVector2& UniformVector2s::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector2s.values)
  return _internal_values(index);
}
inline ::frame::proto::UniformVector2* UniformVector2s::_internal_add_values() {
  return values_.Add();
}
inline ::frame::proto::UniformVector2* UniformVector2s::add_values() {
  // @@protoc_insertion_point(field_add:frame.proto.UniformVector2s.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector2 >&
UniformVector2s::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.UniformVector2s.values)
  return values_;
}

// -------------------------------------------------------------------

// UniformVector3s

// repeated .frame.proto.UniformVector3 values = 1;
inline int UniformVector3s::_internal_values_size() const {
  return values_.size();
}
inline int UniformVector3s::values_size() const {
  return _internal_values_size();
}
inline void UniformVector3s::clear_values() {
  values_.Clear();
}
inline ::frame::proto::UniformVector3* UniformVector3s::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.UniformVector3s.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector3 >*
UniformVector3s::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.UniformVector3s.values)
  return &values_;
}
inline const ::frame::proto::UniformVector3& UniformVector3s::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::frame::proto::UniformVector3& UniformVector3s::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector3s.values)
  return _internal_values(index);
}
inline ::frame::proto::UniformVector3* UniformVector3s::_internal_add_values() {
  return values_.Add();
}
inline ::frame::proto::UniformVector3* UniformVector3s::add_values() {
  // @@protoc_insertion_point(field_add:frame.proto.UniformVector3s.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector3 >&
UniformVector3s::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.UniformVector3s.values)
  return values_;
}

// -------------------------------------------------------------------

// UniformVector4s

// repeated .frame.proto.UniformVector4 values = 1;
inline int UniformVector4s::_internal_values_size() const {
  return values_.size();
}
inline int UniformVector4s::values_size() const {
  return _internal_values_size();
}
inline void UniformVector4s::clear_values() {
  values_.Clear();
}
inline ::frame::proto::UniformVector4* UniformVector4s::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.UniformVector4s.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector4 >*
UniformVector4s::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.UniformVector4s.values)
  return &values_;
}
inline const ::frame::proto::UniformVector4& UniformVector4s::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::frame::proto::UniformVector4& UniformVector4s::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformVector4s.values)
  return _internal_values(index);
}
inline ::frame::proto::UniformVector4* UniformVector4s::_internal_add_values() {
  return values_.Add();
}
inline ::frame::proto::UniformVector4* UniformVector4s::add_values() {
  // @@protoc_insertion_point(field_add:frame.proto.UniformVector4s.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformVector4 >&
UniformVector4s::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.UniformVector4s.values)
  return values_;
}

// -------------------------------------------------------------------

// UniformMatrix4s

// repeated .frame.proto.UniformMatrix4 values = 1;
inline int UniformMatrix4s::_internal_values_size() const {
  return values_.size();
}
inline int UniformMatrix4s::values_size() const {
  return _internal_values_size();
}
inline void UniformMatrix4s::clear_values() {
  values_.Clear();
}
inline ::frame::proto::UniformMatrix4* UniformMatrix4s::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.UniformMatrix4s.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformMatrix4 >*
UniformMatrix4s::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.UniformMatrix4s.values)
  return &values_;
}
inline const ::frame::proto::UniformMatrix4& UniformMatrix4s::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::frame::proto::UniformMatrix4& UniformMatrix4s::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.UniformMatrix4s.values)
  return _internal_values(index);
}
inline ::frame::proto::UniformMatrix4* UniformMatrix4s::_internal_add_values() {
  return values_.Add();
}
inline ::frame::proto::UniformMatrix4* UniformMatrix4s::add_values() {
  // @@protoc_insertion_point(field_add:frame.proto.UniformMatrix4s.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::UniformMatrix4 >&
UniformMatrix4s::values() const {
  // @@protoc_insertion_point(field_list:frame.proto.UniformMatrix4s.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Math_2eproto
