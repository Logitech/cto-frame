// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Uniform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Uniform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Uniform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Uniform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Uniform_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Uniform_2eproto;
namespace frame {
namespace proto {
class Uniform;
class UniformDefaultTypeInternal;
extern UniformDefaultTypeInternal _Uniform_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Uniform* Arena::CreateMaybeMessage<::frame::proto::Uniform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

enum Uniform_UniformEnum : int {
  Uniform_UniformEnum_INVALID = 0,
  Uniform_UniformEnum_PROJECTION_MAT4 = 10,
  Uniform_UniformEnum_PROJECTION_INV_MAT4 = 11,
  Uniform_UniformEnum_VIEW_MAT4 = 20,
  Uniform_UniformEnum_VIEW_INV_MAT4 = 21,
  Uniform_UniformEnum_MODEL_MAT4 = 30,
  Uniform_UniformEnum_MODEL_INV_MAT4 = 31,
  Uniform_UniformEnum_CAMERA_POSITION_VEC3 = 40,
  Uniform_UniformEnum_CAMERA_DIRECTION_VEC3 = 41,
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Uniform_UniformEnum_IsValid(int value);
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MIN = Uniform_UniformEnum_INVALID;
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MAX = Uniform_UniformEnum_CAMERA_DIRECTION_VEC3;
constexpr int Uniform_UniformEnum_UniformEnum_ARRAYSIZE = Uniform_UniformEnum_UniformEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Uniform_UniformEnum_descriptor();
template<typename T>
inline const std::string& Uniform_UniformEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Uniform_UniformEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Uniform_UniformEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Uniform_UniformEnum_descriptor(), enum_t_value);
}
inline bool Uniform_UniformEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Uniform_UniformEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Uniform_UniformEnum>(
    Uniform_UniformEnum_descriptor(), name, value);
}
// ===================================================================

class Uniform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Uniform) */ {
 public:
  inline Uniform() : Uniform(nullptr) {}
  virtual ~Uniform();

  Uniform(const Uniform& from);
  Uniform(Uniform&& from) noexcept
    : Uniform() {
    *this = ::std::move(from);
  }

  inline Uniform& operator=(const Uniform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uniform& operator=(Uniform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uniform& default_instance();

  enum ValueCase {
    kInteger = 2,
    kBoolean = 3,
    kReal = 4,
    kUniformEnum = 10,
    kVec2 = 20,
    kVec3 = 21,
    kVec4 = 22,
    kMat3 = 30,
    kMat4 = 31,
    kIntegers = 40,
    kBools = 41,
    kReals = 42,
    kVec2S = 50,
    kVec3S = 51,
    kVec4S = 52,
    kMat3S = 53,
    kMat4S = 54,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uniform* internal_default_instance() {
    return reinterpret_cast<const Uniform*>(
               &_Uniform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uniform& a, Uniform& b) {
    a.Swap(&b);
  }
  inline void Swap(Uniform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uniform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uniform* New() const final {
    return CreateMaybeMessage<Uniform>(nullptr);
  }

  Uniform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uniform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uniform& from);
  void MergeFrom(const Uniform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uniform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Uniform";
  }
  protected:
  explicit Uniform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Uniform_2eproto);
    return ::descriptor_table_Uniform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Uniform_UniformEnum UniformEnum;
  static constexpr UniformEnum INVALID =
    Uniform_UniformEnum_INVALID;
  static constexpr UniformEnum PROJECTION_MAT4 =
    Uniform_UniformEnum_PROJECTION_MAT4;
  static constexpr UniformEnum PROJECTION_INV_MAT4 =
    Uniform_UniformEnum_PROJECTION_INV_MAT4;
  static constexpr UniformEnum VIEW_MAT4 =
    Uniform_UniformEnum_VIEW_MAT4;
  static constexpr UniformEnum VIEW_INV_MAT4 =
    Uniform_UniformEnum_VIEW_INV_MAT4;
  static constexpr UniformEnum MODEL_MAT4 =
    Uniform_UniformEnum_MODEL_MAT4;
  static constexpr UniformEnum MODEL_INV_MAT4 =
    Uniform_UniformEnum_MODEL_INV_MAT4;
  static constexpr UniformEnum CAMERA_POSITION_VEC3 =
    Uniform_UniformEnum_CAMERA_POSITION_VEC3;
  static constexpr UniformEnum CAMERA_DIRECTION_VEC3 =
    Uniform_UniformEnum_CAMERA_DIRECTION_VEC3;
  static inline bool UniformEnum_IsValid(int value) {
    return Uniform_UniformEnum_IsValid(value);
  }
  static constexpr UniformEnum UniformEnum_MIN =
    Uniform_UniformEnum_UniformEnum_MIN;
  static constexpr UniformEnum UniformEnum_MAX =
    Uniform_UniformEnum_UniformEnum_MAX;
  static constexpr int UniformEnum_ARRAYSIZE =
    Uniform_UniformEnum_UniformEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UniformEnum_descriptor() {
    return Uniform_UniformEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& UniformEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UniformEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UniformEnum_Name.");
    return Uniform_UniformEnum_Name(enum_t_value);
  }
  static inline bool UniformEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UniformEnum* value) {
    return Uniform_UniformEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIntegerFieldNumber = 2,
    kBooleanFieldNumber = 3,
    kRealFieldNumber = 4,
    kUniformEnumFieldNumber = 10,
    kVec2FieldNumber = 20,
    kVec3FieldNumber = 21,
    kVec4FieldNumber = 22,
    kMat3FieldNumber = 30,
    kMat4FieldNumber = 31,
    kIntegersFieldNumber = 40,
    kBoolsFieldNumber = 41,
    kRealsFieldNumber = 42,
    kVec2SFieldNumber = 50,
    kVec3SFieldNumber = 51,
    kVec4SFieldNumber = 52,
    kMat3SFieldNumber = 53,
    kMat4SFieldNumber = 54,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 integer = 2;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  ::PROTOBUF_NAMESPACE_ID::int32 integer() const;
  void set_integer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_integer() const;
  void _internal_set_integer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool boolean = 3;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  bool boolean() const;
  void set_boolean(bool value);
  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);
  public:

  // float real = 4;
  private:
  bool _internal_has_real() const;
  public:
  void clear_real();
  float real() const;
  void set_real(float value);
  private:
  float _internal_real() const;
  void _internal_set_real(float value);
  public:

  // .frame.proto.Uniform.UniformEnum uniform_enum = 10;
  private:
  bool _internal_has_uniform_enum() const;
  public:
  void clear_uniform_enum();
  ::frame::proto::Uniform_UniformEnum uniform_enum() const;
  void set_uniform_enum(::frame::proto::Uniform_UniformEnum value);
  private:
  ::frame::proto::Uniform_UniformEnum _internal_uniform_enum() const;
  void _internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value);
  public:

  // .frame.proto.Vector2 vec2 = 20;
  bool has_vec2() const;
  private:
  bool _internal_has_vec2() const;
  public:
  void clear_vec2();
  const ::frame::proto::Vector2& vec2() const;
  ::frame::proto::Vector2* release_vec2();
  ::frame::proto::Vector2* mutable_vec2();
  void set_allocated_vec2(::frame::proto::Vector2* vec2);
  private:
  const ::frame::proto::Vector2& _internal_vec2() const;
  ::frame::proto::Vector2* _internal_mutable_vec2();
  public:
  void unsafe_arena_set_allocated_vec2(
      ::frame::proto::Vector2* vec2);
  ::frame::proto::Vector2* unsafe_arena_release_vec2();

  // .frame.proto.Vector3 vec3 = 21;
  bool has_vec3() const;
  private:
  bool _internal_has_vec3() const;
  public:
  void clear_vec3();
  const ::frame::proto::Vector3& vec3() const;
  ::frame::proto::Vector3* release_vec3();
  ::frame::proto::Vector3* mutable_vec3();
  void set_allocated_vec3(::frame::proto::Vector3* vec3);
  private:
  const ::frame::proto::Vector3& _internal_vec3() const;
  ::frame::proto::Vector3* _internal_mutable_vec3();
  public:
  void unsafe_arena_set_allocated_vec3(
      ::frame::proto::Vector3* vec3);
  ::frame::proto::Vector3* unsafe_arena_release_vec3();

  // .frame.proto.Vector4 vec4 = 22;
  bool has_vec4() const;
  private:
  bool _internal_has_vec4() const;
  public:
  void clear_vec4();
  const ::frame::proto::Vector4& vec4() const;
  ::frame::proto::Vector4* release_vec4();
  ::frame::proto::Vector4* mutable_vec4();
  void set_allocated_vec4(::frame::proto::Vector4* vec4);
  private:
  const ::frame::proto::Vector4& _internal_vec4() const;
  ::frame::proto::Vector4* _internal_mutable_vec4();
  public:
  void unsafe_arena_set_allocated_vec4(
      ::frame::proto::Vector4* vec4);
  ::frame::proto::Vector4* unsafe_arena_release_vec4();

  // .frame.proto.Matrix3 mat3 = 30;
  bool has_mat3() const;
  private:
  bool _internal_has_mat3() const;
  public:
  void clear_mat3();
  const ::frame::proto::Matrix3& mat3() const;
  ::frame::proto::Matrix3* release_mat3();
  ::frame::proto::Matrix3* mutable_mat3();
  void set_allocated_mat3(::frame::proto::Matrix3* mat3);
  private:
  const ::frame::proto::Matrix3& _internal_mat3() const;
  ::frame::proto::Matrix3* _internal_mutable_mat3();
  public:
  void unsafe_arena_set_allocated_mat3(
      ::frame::proto::Matrix3* mat3);
  ::frame::proto::Matrix3* unsafe_arena_release_mat3();

  // .frame.proto.Matrix4 mat4 = 31;
  bool has_mat4() const;
  private:
  bool _internal_has_mat4() const;
  public:
  void clear_mat4();
  const ::frame::proto::Matrix4& mat4() const;
  ::frame::proto::Matrix4* release_mat4();
  ::frame::proto::Matrix4* mutable_mat4();
  void set_allocated_mat4(::frame::proto::Matrix4* mat4);
  private:
  const ::frame::proto::Matrix4& _internal_mat4() const;
  ::frame::proto::Matrix4* _internal_mutable_mat4();
  public:
  void unsafe_arena_set_allocated_mat4(
      ::frame::proto::Matrix4* mat4);
  ::frame::proto::Matrix4* unsafe_arena_release_mat4();

  // .frame.proto.MultipleInteger integers = 40;
  bool has_integers() const;
  private:
  bool _internal_has_integers() const;
  public:
  void clear_integers();
  const ::frame::proto::MultipleInteger& integers() const;
  ::frame::proto::MultipleInteger* release_integers();
  ::frame::proto::MultipleInteger* mutable_integers();
  void set_allocated_integers(::frame::proto::MultipleInteger* integers);
  private:
  const ::frame::proto::MultipleInteger& _internal_integers() const;
  ::frame::proto::MultipleInteger* _internal_mutable_integers();
  public:
  void unsafe_arena_set_allocated_integers(
      ::frame::proto::MultipleInteger* integers);
  ::frame::proto::MultipleInteger* unsafe_arena_release_integers();

  // .frame.proto.MutlipleBoolean bools = 41;
  bool has_bools() const;
  private:
  bool _internal_has_bools() const;
  public:
  void clear_bools();
  const ::frame::proto::MutlipleBoolean& bools() const;
  ::frame::proto::MutlipleBoolean* release_bools();
  ::frame::proto::MutlipleBoolean* mutable_bools();
  void set_allocated_bools(::frame::proto::MutlipleBoolean* bools);
  private:
  const ::frame::proto::MutlipleBoolean& _internal_bools() const;
  ::frame::proto::MutlipleBoolean* _internal_mutable_bools();
  public:
  void unsafe_arena_set_allocated_bools(
      ::frame::proto::MutlipleBoolean* bools);
  ::frame::proto::MutlipleBoolean* unsafe_arena_release_bools();

  // .frame.proto.MultipleReal reals = 42;
  bool has_reals() const;
  private:
  bool _internal_has_reals() const;
  public:
  void clear_reals();
  const ::frame::proto::MultipleReal& reals() const;
  ::frame::proto::MultipleReal* release_reals();
  ::frame::proto::MultipleReal* mutable_reals();
  void set_allocated_reals(::frame::proto::MultipleReal* reals);
  private:
  const ::frame::proto::MultipleReal& _internal_reals() const;
  ::frame::proto::MultipleReal* _internal_mutable_reals();
  public:
  void unsafe_arena_set_allocated_reals(
      ::frame::proto::MultipleReal* reals);
  ::frame::proto::MultipleReal* unsafe_arena_release_reals();

  // .frame.proto.MulitpleVector2 vec2s = 50;
  bool has_vec2s() const;
  private:
  bool _internal_has_vec2s() const;
  public:
  void clear_vec2s();
  const ::frame::proto::MulitpleVector2& vec2s() const;
  ::frame::proto::MulitpleVector2* release_vec2s();
  ::frame::proto::MulitpleVector2* mutable_vec2s();
  void set_allocated_vec2s(::frame::proto::MulitpleVector2* vec2s);
  private:
  const ::frame::proto::MulitpleVector2& _internal_vec2s() const;
  ::frame::proto::MulitpleVector2* _internal_mutable_vec2s();
  public:
  void unsafe_arena_set_allocated_vec2s(
      ::frame::proto::MulitpleVector2* vec2s);
  ::frame::proto::MulitpleVector2* unsafe_arena_release_vec2s();

  // .frame.proto.MultipleVector3 vec3s = 51;
  bool has_vec3s() const;
  private:
  bool _internal_has_vec3s() const;
  public:
  void clear_vec3s();
  const ::frame::proto::MultipleVector3& vec3s() const;
  ::frame::proto::MultipleVector3* release_vec3s();
  ::frame::proto::MultipleVector3* mutable_vec3s();
  void set_allocated_vec3s(::frame::proto::MultipleVector3* vec3s);
  private:
  const ::frame::proto::MultipleVector3& _internal_vec3s() const;
  ::frame::proto::MultipleVector3* _internal_mutable_vec3s();
  public:
  void unsafe_arena_set_allocated_vec3s(
      ::frame::proto::MultipleVector3* vec3s);
  ::frame::proto::MultipleVector3* unsafe_arena_release_vec3s();

  // .frame.proto.MultipleVector4 vec4s = 52;
  bool has_vec4s() const;
  private:
  bool _internal_has_vec4s() const;
  public:
  void clear_vec4s();
  const ::frame::proto::MultipleVector4& vec4s() const;
  ::frame::proto::MultipleVector4* release_vec4s();
  ::frame::proto::MultipleVector4* mutable_vec4s();
  void set_allocated_vec4s(::frame::proto::MultipleVector4* vec4s);
  private:
  const ::frame::proto::MultipleVector4& _internal_vec4s() const;
  ::frame::proto::MultipleVector4* _internal_mutable_vec4s();
  public:
  void unsafe_arena_set_allocated_vec4s(
      ::frame::proto::MultipleVector4* vec4s);
  ::frame::proto::MultipleVector4* unsafe_arena_release_vec4s();

  // .frame.proto.MultipleMatrix3 mat3s = 53;
  bool has_mat3s() const;
  private:
  bool _internal_has_mat3s() const;
  public:
  void clear_mat3s();
  const ::frame::proto::MultipleMatrix3& mat3s() const;
  ::frame::proto::MultipleMatrix3* release_mat3s();
  ::frame::proto::MultipleMatrix3* mutable_mat3s();
  void set_allocated_mat3s(::frame::proto::MultipleMatrix3* mat3s);
  private:
  const ::frame::proto::MultipleMatrix3& _internal_mat3s() const;
  ::frame::proto::MultipleMatrix3* _internal_mutable_mat3s();
  public:
  void unsafe_arena_set_allocated_mat3s(
      ::frame::proto::MultipleMatrix3* mat3s);
  ::frame::proto::MultipleMatrix3* unsafe_arena_release_mat3s();

  // .frame.proto.MultipleMatrix4 mat4s = 54;
  bool has_mat4s() const;
  private:
  bool _internal_has_mat4s() const;
  public:
  void clear_mat4s();
  const ::frame::proto::MultipleMatrix4& mat4s() const;
  ::frame::proto::MultipleMatrix4* release_mat4s();
  ::frame::proto::MultipleMatrix4* mutable_mat4s();
  void set_allocated_mat4s(::frame::proto::MultipleMatrix4* mat4s);
  private:
  const ::frame::proto::MultipleMatrix4& _internal_mat4s() const;
  ::frame::proto::MultipleMatrix4* _internal_mutable_mat4s();
  public:
  void unsafe_arena_set_allocated_mat4s(
      ::frame::proto::MultipleMatrix4* mat4s);
  ::frame::proto::MultipleMatrix4* unsafe_arena_release_mat4s();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:frame.proto.Uniform)
 private:
  class _Internal;
  void set_has_integer();
  void set_has_boolean();
  void set_has_real();
  void set_has_uniform_enum();
  void set_has_vec2();
  void set_has_vec3();
  void set_has_vec4();
  void set_has_mat3();
  void set_has_mat4();
  void set_has_integers();
  void set_has_bools();
  void set_has_reals();
  void set_has_vec2s();
  void set_has_vec3s();
  void set_has_vec4s();
  void set_has_mat3s();
  void set_has_mat4s();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 integer_;
    bool boolean_;
    float real_;
    int uniform_enum_;
    ::frame::proto::Vector2* vec2_;
    ::frame::proto::Vector3* vec3_;
    ::frame::proto::Vector4* vec4_;
    ::frame::proto::Matrix3* mat3_;
    ::frame::proto::Matrix4* mat4_;
    ::frame::proto::MultipleInteger* integers_;
    ::frame::proto::MutlipleBoolean* bools_;
    ::frame::proto::MultipleReal* reals_;
    ::frame::proto::MulitpleVector2* vec2s_;
    ::frame::proto::MultipleVector3* vec3s_;
    ::frame::proto::MultipleVector4* vec4s_;
    ::frame::proto::MultipleMatrix3* mat3s_;
    ::frame::proto::MultipleMatrix4* mat4s_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Uniform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uniform

// string name = 1;
inline void Uniform::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Uniform::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.name)
  return _internal_name();
}
inline void Uniform::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.name)
}
inline std::string* Uniform::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.name)
  return _internal_mutable_name();
}
inline const std::string& Uniform::_internal_name() const {
  return name_.Get();
}
inline void Uniform::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Uniform::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Uniform.name)
}
inline void Uniform::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Uniform.name)
}
inline void Uniform::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Uniform.name)
}
inline std::string* Uniform::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Uniform::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Uniform::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.name)
}

// int32 integer = 2;
inline bool Uniform::_internal_has_integer() const {
  return value_case() == kInteger;
}
inline void Uniform::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Uniform::clear_integer() {
  if (_internal_has_integer()) {
    value_.integer_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Uniform::_internal_integer() const {
  if (_internal_has_integer()) {
    return value_.integer_;
  }
  return 0;
}
inline void Uniform::_internal_set_integer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Uniform::integer() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.integer)
  return _internal_integer();
}
inline void Uniform::set_integer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.integer)
}

// bool boolean = 3;
inline bool Uniform::_internal_has_boolean() const {
  return value_case() == kBoolean;
}
inline void Uniform::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void Uniform::clear_boolean() {
  if (_internal_has_boolean()) {
    value_.boolean_ = false;
    clear_has_value();
  }
}
inline bool Uniform::_internal_boolean() const {
  if (_internal_has_boolean()) {
    return value_.boolean_;
  }
  return false;
}
inline void Uniform::_internal_set_boolean(bool value) {
  if (!_internal_has_boolean()) {
    clear_value();
    set_has_boolean();
  }
  value_.boolean_ = value;
}
inline bool Uniform::boolean() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.boolean)
  return _internal_boolean();
}
inline void Uniform::set_boolean(bool value) {
  _internal_set_boolean(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.boolean)
}

// float real = 4;
inline bool Uniform::_internal_has_real() const {
  return value_case() == kReal;
}
inline void Uniform::set_has_real() {
  _oneof_case_[0] = kReal;
}
inline void Uniform::clear_real() {
  if (_internal_has_real()) {
    value_.real_ = 0;
    clear_has_value();
  }
}
inline float Uniform::_internal_real() const {
  if (_internal_has_real()) {
    return value_.real_;
  }
  return 0;
}
inline void Uniform::_internal_set_real(float value) {
  if (!_internal_has_real()) {
    clear_value();
    set_has_real();
  }
  value_.real_ = value;
}
inline float Uniform::real() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.real)
  return _internal_real();
}
inline void Uniform::set_real(float value) {
  _internal_set_real(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.real)
}

// .frame.proto.Uniform.UniformEnum uniform_enum = 10;
inline bool Uniform::_internal_has_uniform_enum() const {
  return value_case() == kUniformEnum;
}
inline void Uniform::set_has_uniform_enum() {
  _oneof_case_[0] = kUniformEnum;
}
inline void Uniform::clear_uniform_enum() {
  if (_internal_has_uniform_enum()) {
    value_.uniform_enum_ = 0;
    clear_has_value();
  }
}
inline ::frame::proto::Uniform_UniformEnum Uniform::_internal_uniform_enum() const {
  if (_internal_has_uniform_enum()) {
    return static_cast< ::frame::proto::Uniform_UniformEnum >(value_.uniform_enum_);
  }
  return static_cast< ::frame::proto::Uniform_UniformEnum >(0);
}
inline ::frame::proto::Uniform_UniformEnum Uniform::uniform_enum() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_enum)
  return _internal_uniform_enum();
}
inline void Uniform::_internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  if (!_internal_has_uniform_enum()) {
    clear_value();
    set_has_uniform_enum();
  }
  value_.uniform_enum_ = value;
}
inline void Uniform::set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_enum)
  _internal_set_uniform_enum(value);
}

// .frame.proto.Vector2 vec2 = 20;
inline bool Uniform::_internal_has_vec2() const {
  return value_case() == kVec2;
}
inline bool Uniform::has_vec2() const {
  return _internal_has_vec2();
}
inline void Uniform::set_has_vec2() {
  _oneof_case_[0] = kVec2;
}
inline ::frame::proto::Vector2* Uniform::release_vec2() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.vec2)
  if (_internal_has_vec2()) {
    clear_has_value();
      ::frame::proto::Vector2* temp = value_.vec2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Vector2& Uniform::_internal_vec2() const {
  return _internal_has_vec2()
      ? *value_.vec2_
      : *reinterpret_cast< ::frame::proto::Vector2*>(&::frame::proto::_Vector2_default_instance_);
}
inline const ::frame::proto::Vector2& Uniform::vec2() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.vec2)
  return _internal_vec2();
}
inline ::frame::proto::Vector2* Uniform::unsafe_arena_release_vec2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.vec2)
  if (_internal_has_vec2()) {
    clear_has_value();
    ::frame::proto::Vector2* temp = value_.vec2_;
    value_.vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_vec2(::frame::proto::Vector2* vec2) {
  clear_value();
  if (vec2) {
    set_has_vec2();
    value_.vec2_ = vec2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.vec2)
}
inline ::frame::proto::Vector2* Uniform::_internal_mutable_vec2() {
  if (!_internal_has_vec2()) {
    clear_value();
    set_has_vec2();
    value_.vec2_ = CreateMaybeMessage< ::frame::proto::Vector2 >(GetArena());
  }
  return value_.vec2_;
}
inline ::frame::proto::Vector2* Uniform::mutable_vec2() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.vec2)
  return _internal_mutable_vec2();
}

// .frame.proto.Vector3 vec3 = 21;
inline bool Uniform::_internal_has_vec3() const {
  return value_case() == kVec3;
}
inline bool Uniform::has_vec3() const {
  return _internal_has_vec3();
}
inline void Uniform::set_has_vec3() {
  _oneof_case_[0] = kVec3;
}
inline ::frame::proto::Vector3* Uniform::release_vec3() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.vec3)
  if (_internal_has_vec3()) {
    clear_has_value();
      ::frame::proto::Vector3* temp = value_.vec3_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Vector3& Uniform::_internal_vec3() const {
  return _internal_has_vec3()
      ? *value_.vec3_
      : *reinterpret_cast< ::frame::proto::Vector3*>(&::frame::proto::_Vector3_default_instance_);
}
inline const ::frame::proto::Vector3& Uniform::vec3() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.vec3)
  return _internal_vec3();
}
inline ::frame::proto::Vector3* Uniform::unsafe_arena_release_vec3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.vec3)
  if (_internal_has_vec3()) {
    clear_has_value();
    ::frame::proto::Vector3* temp = value_.vec3_;
    value_.vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_vec3(::frame::proto::Vector3* vec3) {
  clear_value();
  if (vec3) {
    set_has_vec3();
    value_.vec3_ = vec3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.vec3)
}
inline ::frame::proto::Vector3* Uniform::_internal_mutable_vec3() {
  if (!_internal_has_vec3()) {
    clear_value();
    set_has_vec3();
    value_.vec3_ = CreateMaybeMessage< ::frame::proto::Vector3 >(GetArena());
  }
  return value_.vec3_;
}
inline ::frame::proto::Vector3* Uniform::mutable_vec3() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.vec3)
  return _internal_mutable_vec3();
}

// .frame.proto.Vector4 vec4 = 22;
inline bool Uniform::_internal_has_vec4() const {
  return value_case() == kVec4;
}
inline bool Uniform::has_vec4() const {
  return _internal_has_vec4();
}
inline void Uniform::set_has_vec4() {
  _oneof_case_[0] = kVec4;
}
inline ::frame::proto::Vector4* Uniform::release_vec4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.vec4)
  if (_internal_has_vec4()) {
    clear_has_value();
      ::frame::proto::Vector4* temp = value_.vec4_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Vector4& Uniform::_internal_vec4() const {
  return _internal_has_vec4()
      ? *value_.vec4_
      : *reinterpret_cast< ::frame::proto::Vector4*>(&::frame::proto::_Vector4_default_instance_);
}
inline const ::frame::proto::Vector4& Uniform::vec4() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.vec4)
  return _internal_vec4();
}
inline ::frame::proto::Vector4* Uniform::unsafe_arena_release_vec4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.vec4)
  if (_internal_has_vec4()) {
    clear_has_value();
    ::frame::proto::Vector4* temp = value_.vec4_;
    value_.vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_vec4(::frame::proto::Vector4* vec4) {
  clear_value();
  if (vec4) {
    set_has_vec4();
    value_.vec4_ = vec4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.vec4)
}
inline ::frame::proto::Vector4* Uniform::_internal_mutable_vec4() {
  if (!_internal_has_vec4()) {
    clear_value();
    set_has_vec4();
    value_.vec4_ = CreateMaybeMessage< ::frame::proto::Vector4 >(GetArena());
  }
  return value_.vec4_;
}
inline ::frame::proto::Vector4* Uniform::mutable_vec4() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.vec4)
  return _internal_mutable_vec4();
}

// .frame.proto.Matrix3 mat3 = 30;
inline bool Uniform::_internal_has_mat3() const {
  return value_case() == kMat3;
}
inline bool Uniform::has_mat3() const {
  return _internal_has_mat3();
}
inline void Uniform::set_has_mat3() {
  _oneof_case_[0] = kMat3;
}
inline ::frame::proto::Matrix3* Uniform::release_mat3() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.mat3)
  if (_internal_has_mat3()) {
    clear_has_value();
      ::frame::proto::Matrix3* temp = value_.mat3_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.mat3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Matrix3& Uniform::_internal_mat3() const {
  return _internal_has_mat3()
      ? *value_.mat3_
      : *reinterpret_cast< ::frame::proto::Matrix3*>(&::frame::proto::_Matrix3_default_instance_);
}
inline const ::frame::proto::Matrix3& Uniform::mat3() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.mat3)
  return _internal_mat3();
}
inline ::frame::proto::Matrix3* Uniform::unsafe_arena_release_mat3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.mat3)
  if (_internal_has_mat3()) {
    clear_has_value();
    ::frame::proto::Matrix3* temp = value_.mat3_;
    value_.mat3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_mat3(::frame::proto::Matrix3* mat3) {
  clear_value();
  if (mat3) {
    set_has_mat3();
    value_.mat3_ = mat3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.mat3)
}
inline ::frame::proto::Matrix3* Uniform::_internal_mutable_mat3() {
  if (!_internal_has_mat3()) {
    clear_value();
    set_has_mat3();
    value_.mat3_ = CreateMaybeMessage< ::frame::proto::Matrix3 >(GetArena());
  }
  return value_.mat3_;
}
inline ::frame::proto::Matrix3* Uniform::mutable_mat3() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.mat3)
  return _internal_mutable_mat3();
}

// .frame.proto.Matrix4 mat4 = 31;
inline bool Uniform::_internal_has_mat4() const {
  return value_case() == kMat4;
}
inline bool Uniform::has_mat4() const {
  return _internal_has_mat4();
}
inline void Uniform::set_has_mat4() {
  _oneof_case_[0] = kMat4;
}
inline ::frame::proto::Matrix4* Uniform::release_mat4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.mat4)
  if (_internal_has_mat4()) {
    clear_has_value();
      ::frame::proto::Matrix4* temp = value_.mat4_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Matrix4& Uniform::_internal_mat4() const {
  return _internal_has_mat4()
      ? *value_.mat4_
      : *reinterpret_cast< ::frame::proto::Matrix4*>(&::frame::proto::_Matrix4_default_instance_);
}
inline const ::frame::proto::Matrix4& Uniform::mat4() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.mat4)
  return _internal_mat4();
}
inline ::frame::proto::Matrix4* Uniform::unsafe_arena_release_mat4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.mat4)
  if (_internal_has_mat4()) {
    clear_has_value();
    ::frame::proto::Matrix4* temp = value_.mat4_;
    value_.mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_mat4(::frame::proto::Matrix4* mat4) {
  clear_value();
  if (mat4) {
    set_has_mat4();
    value_.mat4_ = mat4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.mat4)
}
inline ::frame::proto::Matrix4* Uniform::_internal_mutable_mat4() {
  if (!_internal_has_mat4()) {
    clear_value();
    set_has_mat4();
    value_.mat4_ = CreateMaybeMessage< ::frame::proto::Matrix4 >(GetArena());
  }
  return value_.mat4_;
}
inline ::frame::proto::Matrix4* Uniform::mutable_mat4() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.mat4)
  return _internal_mutable_mat4();
}

// .frame.proto.MultipleInteger integers = 40;
inline bool Uniform::_internal_has_integers() const {
  return value_case() == kIntegers;
}
inline bool Uniform::has_integers() const {
  return _internal_has_integers();
}
inline void Uniform::set_has_integers() {
  _oneof_case_[0] = kIntegers;
}
inline ::frame::proto::MultipleInteger* Uniform::release_integers() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.integers)
  if (_internal_has_integers()) {
    clear_has_value();
      ::frame::proto::MultipleInteger* temp = value_.integers_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.integers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MultipleInteger& Uniform::_internal_integers() const {
  return _internal_has_integers()
      ? *value_.integers_
      : *reinterpret_cast< ::frame::proto::MultipleInteger*>(&::frame::proto::_MultipleInteger_default_instance_);
}
inline const ::frame::proto::MultipleInteger& Uniform::integers() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.integers)
  return _internal_integers();
}
inline ::frame::proto::MultipleInteger* Uniform::unsafe_arena_release_integers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.integers)
  if (_internal_has_integers()) {
    clear_has_value();
    ::frame::proto::MultipleInteger* temp = value_.integers_;
    value_.integers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_integers(::frame::proto::MultipleInteger* integers) {
  clear_value();
  if (integers) {
    set_has_integers();
    value_.integers_ = integers;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.integers)
}
inline ::frame::proto::MultipleInteger* Uniform::_internal_mutable_integers() {
  if (!_internal_has_integers()) {
    clear_value();
    set_has_integers();
    value_.integers_ = CreateMaybeMessage< ::frame::proto::MultipleInteger >(GetArena());
  }
  return value_.integers_;
}
inline ::frame::proto::MultipleInteger* Uniform::mutable_integers() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.integers)
  return _internal_mutable_integers();
}

// .frame.proto.MutlipleBoolean bools = 41;
inline bool Uniform::_internal_has_bools() const {
  return value_case() == kBools;
}
inline bool Uniform::has_bools() const {
  return _internal_has_bools();
}
inline void Uniform::set_has_bools() {
  _oneof_case_[0] = kBools;
}
inline ::frame::proto::MutlipleBoolean* Uniform::release_bools() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.bools)
  if (_internal_has_bools()) {
    clear_has_value();
      ::frame::proto::MutlipleBoolean* temp = value_.bools_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.bools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MutlipleBoolean& Uniform::_internal_bools() const {
  return _internal_has_bools()
      ? *value_.bools_
      : *reinterpret_cast< ::frame::proto::MutlipleBoolean*>(&::frame::proto::_MutlipleBoolean_default_instance_);
}
inline const ::frame::proto::MutlipleBoolean& Uniform::bools() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.bools)
  return _internal_bools();
}
inline ::frame::proto::MutlipleBoolean* Uniform::unsafe_arena_release_bools() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.bools)
  if (_internal_has_bools()) {
    clear_has_value();
    ::frame::proto::MutlipleBoolean* temp = value_.bools_;
    value_.bools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_bools(::frame::proto::MutlipleBoolean* bools) {
  clear_value();
  if (bools) {
    set_has_bools();
    value_.bools_ = bools;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.bools)
}
inline ::frame::proto::MutlipleBoolean* Uniform::_internal_mutable_bools() {
  if (!_internal_has_bools()) {
    clear_value();
    set_has_bools();
    value_.bools_ = CreateMaybeMessage< ::frame::proto::MutlipleBoolean >(GetArena());
  }
  return value_.bools_;
}
inline ::frame::proto::MutlipleBoolean* Uniform::mutable_bools() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.bools)
  return _internal_mutable_bools();
}

// .frame.proto.MultipleReal reals = 42;
inline bool Uniform::_internal_has_reals() const {
  return value_case() == kReals;
}
inline bool Uniform::has_reals() const {
  return _internal_has_reals();
}
inline void Uniform::set_has_reals() {
  _oneof_case_[0] = kReals;
}
inline ::frame::proto::MultipleReal* Uniform::release_reals() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.reals)
  if (_internal_has_reals()) {
    clear_has_value();
      ::frame::proto::MultipleReal* temp = value_.reals_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.reals_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MultipleReal& Uniform::_internal_reals() const {
  return _internal_has_reals()
      ? *value_.reals_
      : *reinterpret_cast< ::frame::proto::MultipleReal*>(&::frame::proto::_MultipleReal_default_instance_);
}
inline const ::frame::proto::MultipleReal& Uniform::reals() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.reals)
  return _internal_reals();
}
inline ::frame::proto::MultipleReal* Uniform::unsafe_arena_release_reals() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.reals)
  if (_internal_has_reals()) {
    clear_has_value();
    ::frame::proto::MultipleReal* temp = value_.reals_;
    value_.reals_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_reals(::frame::proto::MultipleReal* reals) {
  clear_value();
  if (reals) {
    set_has_reals();
    value_.reals_ = reals;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.reals)
}
inline ::frame::proto::MultipleReal* Uniform::_internal_mutable_reals() {
  if (!_internal_has_reals()) {
    clear_value();
    set_has_reals();
    value_.reals_ = CreateMaybeMessage< ::frame::proto::MultipleReal >(GetArena());
  }
  return value_.reals_;
}
inline ::frame::proto::MultipleReal* Uniform::mutable_reals() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.reals)
  return _internal_mutable_reals();
}

// .frame.proto.MulitpleVector2 vec2s = 50;
inline bool Uniform::_internal_has_vec2s() const {
  return value_case() == kVec2S;
}
inline bool Uniform::has_vec2s() const {
  return _internal_has_vec2s();
}
inline void Uniform::set_has_vec2s() {
  _oneof_case_[0] = kVec2S;
}
inline ::frame::proto::MulitpleVector2* Uniform::release_vec2s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.vec2s)
  if (_internal_has_vec2s()) {
    clear_has_value();
      ::frame::proto::MulitpleVector2* temp = value_.vec2s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MulitpleVector2& Uniform::_internal_vec2s() const {
  return _internal_has_vec2s()
      ? *value_.vec2s_
      : *reinterpret_cast< ::frame::proto::MulitpleVector2*>(&::frame::proto::_MulitpleVector2_default_instance_);
}
inline const ::frame::proto::MulitpleVector2& Uniform::vec2s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.vec2s)
  return _internal_vec2s();
}
inline ::frame::proto::MulitpleVector2* Uniform::unsafe_arena_release_vec2s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.vec2s)
  if (_internal_has_vec2s()) {
    clear_has_value();
    ::frame::proto::MulitpleVector2* temp = value_.vec2s_;
    value_.vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_vec2s(::frame::proto::MulitpleVector2* vec2s) {
  clear_value();
  if (vec2s) {
    set_has_vec2s();
    value_.vec2s_ = vec2s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.vec2s)
}
inline ::frame::proto::MulitpleVector2* Uniform::_internal_mutable_vec2s() {
  if (!_internal_has_vec2s()) {
    clear_value();
    set_has_vec2s();
    value_.vec2s_ = CreateMaybeMessage< ::frame::proto::MulitpleVector2 >(GetArena());
  }
  return value_.vec2s_;
}
inline ::frame::proto::MulitpleVector2* Uniform::mutable_vec2s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.vec2s)
  return _internal_mutable_vec2s();
}

// .frame.proto.MultipleVector3 vec3s = 51;
inline bool Uniform::_internal_has_vec3s() const {
  return value_case() == kVec3S;
}
inline bool Uniform::has_vec3s() const {
  return _internal_has_vec3s();
}
inline void Uniform::set_has_vec3s() {
  _oneof_case_[0] = kVec3S;
}
inline ::frame::proto::MultipleVector3* Uniform::release_vec3s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.vec3s)
  if (_internal_has_vec3s()) {
    clear_has_value();
      ::frame::proto::MultipleVector3* temp = value_.vec3s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MultipleVector3& Uniform::_internal_vec3s() const {
  return _internal_has_vec3s()
      ? *value_.vec3s_
      : *reinterpret_cast< ::frame::proto::MultipleVector3*>(&::frame::proto::_MultipleVector3_default_instance_);
}
inline const ::frame::proto::MultipleVector3& Uniform::vec3s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.vec3s)
  return _internal_vec3s();
}
inline ::frame::proto::MultipleVector3* Uniform::unsafe_arena_release_vec3s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.vec3s)
  if (_internal_has_vec3s()) {
    clear_has_value();
    ::frame::proto::MultipleVector3* temp = value_.vec3s_;
    value_.vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_vec3s(::frame::proto::MultipleVector3* vec3s) {
  clear_value();
  if (vec3s) {
    set_has_vec3s();
    value_.vec3s_ = vec3s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.vec3s)
}
inline ::frame::proto::MultipleVector3* Uniform::_internal_mutable_vec3s() {
  if (!_internal_has_vec3s()) {
    clear_value();
    set_has_vec3s();
    value_.vec3s_ = CreateMaybeMessage< ::frame::proto::MultipleVector3 >(GetArena());
  }
  return value_.vec3s_;
}
inline ::frame::proto::MultipleVector3* Uniform::mutable_vec3s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.vec3s)
  return _internal_mutable_vec3s();
}

// .frame.proto.MultipleVector4 vec4s = 52;
inline bool Uniform::_internal_has_vec4s() const {
  return value_case() == kVec4S;
}
inline bool Uniform::has_vec4s() const {
  return _internal_has_vec4s();
}
inline void Uniform::set_has_vec4s() {
  _oneof_case_[0] = kVec4S;
}
inline ::frame::proto::MultipleVector4* Uniform::release_vec4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.vec4s)
  if (_internal_has_vec4s()) {
    clear_has_value();
      ::frame::proto::MultipleVector4* temp = value_.vec4s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MultipleVector4& Uniform::_internal_vec4s() const {
  return _internal_has_vec4s()
      ? *value_.vec4s_
      : *reinterpret_cast< ::frame::proto::MultipleVector4*>(&::frame::proto::_MultipleVector4_default_instance_);
}
inline const ::frame::proto::MultipleVector4& Uniform::vec4s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.vec4s)
  return _internal_vec4s();
}
inline ::frame::proto::MultipleVector4* Uniform::unsafe_arena_release_vec4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.vec4s)
  if (_internal_has_vec4s()) {
    clear_has_value();
    ::frame::proto::MultipleVector4* temp = value_.vec4s_;
    value_.vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_vec4s(::frame::proto::MultipleVector4* vec4s) {
  clear_value();
  if (vec4s) {
    set_has_vec4s();
    value_.vec4s_ = vec4s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.vec4s)
}
inline ::frame::proto::MultipleVector4* Uniform::_internal_mutable_vec4s() {
  if (!_internal_has_vec4s()) {
    clear_value();
    set_has_vec4s();
    value_.vec4s_ = CreateMaybeMessage< ::frame::proto::MultipleVector4 >(GetArena());
  }
  return value_.vec4s_;
}
inline ::frame::proto::MultipleVector4* Uniform::mutable_vec4s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.vec4s)
  return _internal_mutable_vec4s();
}

// .frame.proto.MultipleMatrix3 mat3s = 53;
inline bool Uniform::_internal_has_mat3s() const {
  return value_case() == kMat3S;
}
inline bool Uniform::has_mat3s() const {
  return _internal_has_mat3s();
}
inline void Uniform::set_has_mat3s() {
  _oneof_case_[0] = kMat3S;
}
inline ::frame::proto::MultipleMatrix3* Uniform::release_mat3s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.mat3s)
  if (_internal_has_mat3s()) {
    clear_has_value();
      ::frame::proto::MultipleMatrix3* temp = value_.mat3s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.mat3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MultipleMatrix3& Uniform::_internal_mat3s() const {
  return _internal_has_mat3s()
      ? *value_.mat3s_
      : *reinterpret_cast< ::frame::proto::MultipleMatrix3*>(&::frame::proto::_MultipleMatrix3_default_instance_);
}
inline const ::frame::proto::MultipleMatrix3& Uniform::mat3s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.mat3s)
  return _internal_mat3s();
}
inline ::frame::proto::MultipleMatrix3* Uniform::unsafe_arena_release_mat3s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.mat3s)
  if (_internal_has_mat3s()) {
    clear_has_value();
    ::frame::proto::MultipleMatrix3* temp = value_.mat3s_;
    value_.mat3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_mat3s(::frame::proto::MultipleMatrix3* mat3s) {
  clear_value();
  if (mat3s) {
    set_has_mat3s();
    value_.mat3s_ = mat3s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.mat3s)
}
inline ::frame::proto::MultipleMatrix3* Uniform::_internal_mutable_mat3s() {
  if (!_internal_has_mat3s()) {
    clear_value();
    set_has_mat3s();
    value_.mat3s_ = CreateMaybeMessage< ::frame::proto::MultipleMatrix3 >(GetArena());
  }
  return value_.mat3s_;
}
inline ::frame::proto::MultipleMatrix3* Uniform::mutable_mat3s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.mat3s)
  return _internal_mutable_mat3s();
}

// .frame.proto.MultipleMatrix4 mat4s = 54;
inline bool Uniform::_internal_has_mat4s() const {
  return value_case() == kMat4S;
}
inline bool Uniform::has_mat4s() const {
  return _internal_has_mat4s();
}
inline void Uniform::set_has_mat4s() {
  _oneof_case_[0] = kMat4S;
}
inline ::frame::proto::MultipleMatrix4* Uniform::release_mat4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.mat4s)
  if (_internal_has_mat4s()) {
    clear_has_value();
      ::frame::proto::MultipleMatrix4* temp = value_.mat4s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::MultipleMatrix4& Uniform::_internal_mat4s() const {
  return _internal_has_mat4s()
      ? *value_.mat4s_
      : *reinterpret_cast< ::frame::proto::MultipleMatrix4*>(&::frame::proto::_MultipleMatrix4_default_instance_);
}
inline const ::frame::proto::MultipleMatrix4& Uniform::mat4s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.mat4s)
  return _internal_mat4s();
}
inline ::frame::proto::MultipleMatrix4* Uniform::unsafe_arena_release_mat4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.mat4s)
  if (_internal_has_mat4s()) {
    clear_has_value();
    ::frame::proto::MultipleMatrix4* temp = value_.mat4s_;
    value_.mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_mat4s(::frame::proto::MultipleMatrix4* mat4s) {
  clear_value();
  if (mat4s) {
    set_has_mat4s();
    value_.mat4s_ = mat4s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.mat4s)
}
inline ::frame::proto::MultipleMatrix4* Uniform::_internal_mutable_mat4s() {
  if (!_internal_has_mat4s()) {
    clear_value();
    set_has_mat4s();
    value_.mat4s_ = CreateMaybeMessage< ::frame::proto::MultipleMatrix4 >(GetArena());
  }
  return value_.mat4s_;
}
inline ::frame::proto::MultipleMatrix4* Uniform::mutable_mat4s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.mat4s)
  return _internal_mutable_mat4s();
}

inline bool Uniform::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Uniform::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Uniform::ValueCase Uniform::value_case() const {
  return Uniform::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frame::proto::Uniform_UniformEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::Uniform_UniformEnum>() {
  return ::frame::proto::Uniform_UniformEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Uniform_2eproto
