// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Uniform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Uniform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Uniform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Uniform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Uniform_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Uniform_2eproto;
namespace frame {
namespace proto {
class Uniform;
class UniformDefaultTypeInternal;
extern UniformDefaultTypeInternal _Uniform_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Uniform* Arena::CreateMaybeMessage<::frame::proto::Uniform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

enum Uniform_UniformEnum : int {
  Uniform_UniformEnum_INVALID = 0,
  Uniform_UniformEnum_PROJECTION_MAT4 = 10,
  Uniform_UniformEnum_PROJECTION_INV_MAT4 = 11,
  Uniform_UniformEnum_VIEW_MAT4 = 20,
  Uniform_UniformEnum_VIEW_INV_MAT4 = 21,
  Uniform_UniformEnum_MODEL_MAT4 = 30,
  Uniform_UniformEnum_MODEL_INV_MAT4 = 31,
  Uniform_UniformEnum_CAMERA_POSITION_VEC3 = 40,
  Uniform_UniformEnum_CAMERA_DIRECTION_VEC3 = 41,
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Uniform_UniformEnum_IsValid(int value);
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MIN = Uniform_UniformEnum_INVALID;
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MAX = Uniform_UniformEnum_CAMERA_DIRECTION_VEC3;
constexpr int Uniform_UniformEnum_UniformEnum_ARRAYSIZE = Uniform_UniformEnum_UniformEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Uniform_UniformEnum_descriptor();
template<typename T>
inline const std::string& Uniform_UniformEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Uniform_UniformEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Uniform_UniformEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Uniform_UniformEnum_descriptor(), enum_t_value);
}
inline bool Uniform_UniformEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Uniform_UniformEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Uniform_UniformEnum>(
    Uniform_UniformEnum_descriptor(), name, value);
}
// ===================================================================

class Uniform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Uniform) */ {
 public:
  inline Uniform() : Uniform(nullptr) {}
  virtual ~Uniform();

  Uniform(const Uniform& from);
  Uniform(Uniform&& from) noexcept
    : Uniform() {
    *this = ::std::move(from);
  }

  inline Uniform& operator=(const Uniform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uniform& operator=(Uniform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uniform& default_instance();

  enum ValueCase {
    kUniformInt = 2,
    kUniformBool = 3,
    kUniformFloat = 4,
    kUniformEnum = 10,
    kUniformVec2 = 20,
    kUniformVec3 = 21,
    kUniformVec4 = 22,
    kUniformMat4 = 31,
    kUniformInts = 40,
    kUniformBools = 41,
    kUniformFloats = 42,
    kUniformVec2S = 50,
    kUniformVec3S = 51,
    kUniformVec4S = 52,
    kUniformMat4S = 54,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uniform* internal_default_instance() {
    return reinterpret_cast<const Uniform*>(
               &_Uniform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uniform& a, Uniform& b) {
    a.Swap(&b);
  }
  inline void Swap(Uniform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uniform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uniform* New() const final {
    return CreateMaybeMessage<Uniform>(nullptr);
  }

  Uniform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uniform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uniform& from);
  void MergeFrom(const Uniform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uniform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Uniform";
  }
  protected:
  explicit Uniform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Uniform_2eproto);
    return ::descriptor_table_Uniform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Uniform_UniformEnum UniformEnum;
  static constexpr UniformEnum INVALID =
    Uniform_UniformEnum_INVALID;
  static constexpr UniformEnum PROJECTION_MAT4 =
    Uniform_UniformEnum_PROJECTION_MAT4;
  static constexpr UniformEnum PROJECTION_INV_MAT4 =
    Uniform_UniformEnum_PROJECTION_INV_MAT4;
  static constexpr UniformEnum VIEW_MAT4 =
    Uniform_UniformEnum_VIEW_MAT4;
  static constexpr UniformEnum VIEW_INV_MAT4 =
    Uniform_UniformEnum_VIEW_INV_MAT4;
  static constexpr UniformEnum MODEL_MAT4 =
    Uniform_UniformEnum_MODEL_MAT4;
  static constexpr UniformEnum MODEL_INV_MAT4 =
    Uniform_UniformEnum_MODEL_INV_MAT4;
  static constexpr UniformEnum CAMERA_POSITION_VEC3 =
    Uniform_UniformEnum_CAMERA_POSITION_VEC3;
  static constexpr UniformEnum CAMERA_DIRECTION_VEC3 =
    Uniform_UniformEnum_CAMERA_DIRECTION_VEC3;
  static inline bool UniformEnum_IsValid(int value) {
    return Uniform_UniformEnum_IsValid(value);
  }
  static constexpr UniformEnum UniformEnum_MIN =
    Uniform_UniformEnum_UniformEnum_MIN;
  static constexpr UniformEnum UniformEnum_MAX =
    Uniform_UniformEnum_UniformEnum_MAX;
  static constexpr int UniformEnum_ARRAYSIZE =
    Uniform_UniformEnum_UniformEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UniformEnum_descriptor() {
    return Uniform_UniformEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& UniformEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UniformEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UniformEnum_Name.");
    return Uniform_UniformEnum_Name(enum_t_value);
  }
  static inline bool UniformEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UniformEnum* value) {
    return Uniform_UniformEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUniformIntFieldNumber = 2,
    kUniformBoolFieldNumber = 3,
    kUniformFloatFieldNumber = 4,
    kUniformEnumFieldNumber = 10,
    kUniformVec2FieldNumber = 20,
    kUniformVec3FieldNumber = 21,
    kUniformVec4FieldNumber = 22,
    kUniformMat4FieldNumber = 31,
    kUniformIntsFieldNumber = 40,
    kUniformBoolsFieldNumber = 41,
    kUniformFloatsFieldNumber = 42,
    kUniformVec2SFieldNumber = 50,
    kUniformVec3SFieldNumber = 51,
    kUniformVec4SFieldNumber = 52,
    kUniformMat4SFieldNumber = 54,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 uniform_int = 2;
  private:
  bool _internal_has_uniform_int() const;
  public:
  void clear_uniform_int();
  ::PROTOBUF_NAMESPACE_ID::int32 uniform_int() const;
  void set_uniform_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniform_int() const;
  void _internal_set_uniform_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool uniform_bool = 3;
  private:
  bool _internal_has_uniform_bool() const;
  public:
  void clear_uniform_bool();
  bool uniform_bool() const;
  void set_uniform_bool(bool value);
  private:
  bool _internal_uniform_bool() const;
  void _internal_set_uniform_bool(bool value);
  public:

  // float uniform_float = 4;
  private:
  bool _internal_has_uniform_float() const;
  public:
  void clear_uniform_float();
  float uniform_float() const;
  void set_uniform_float(float value);
  private:
  float _internal_uniform_float() const;
  void _internal_set_uniform_float(float value);
  public:

  // .frame.proto.Uniform.UniformEnum uniform_enum = 10;
  private:
  bool _internal_has_uniform_enum() const;
  public:
  void clear_uniform_enum();
  ::frame::proto::Uniform_UniformEnum uniform_enum() const;
  void set_uniform_enum(::frame::proto::Uniform_UniformEnum value);
  private:
  ::frame::proto::Uniform_UniformEnum _internal_uniform_enum() const;
  void _internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value);
  public:

  // .frame.proto.UniformVector2 uniform_vec2 = 20;
  bool has_uniform_vec2() const;
  private:
  bool _internal_has_uniform_vec2() const;
  public:
  void clear_uniform_vec2();
  const ::frame::proto::UniformVector2& uniform_vec2() const;
  ::frame::proto::UniformVector2* release_uniform_vec2();
  ::frame::proto::UniformVector2* mutable_uniform_vec2();
  void set_allocated_uniform_vec2(::frame::proto::UniformVector2* uniform_vec2);
  private:
  const ::frame::proto::UniformVector2& _internal_uniform_vec2() const;
  ::frame::proto::UniformVector2* _internal_mutable_uniform_vec2();
  public:
  void unsafe_arena_set_allocated_uniform_vec2(
      ::frame::proto::UniformVector2* uniform_vec2);
  ::frame::proto::UniformVector2* unsafe_arena_release_uniform_vec2();

  // .frame.proto.UniformVector3 uniform_vec3 = 21;
  bool has_uniform_vec3() const;
  private:
  bool _internal_has_uniform_vec3() const;
  public:
  void clear_uniform_vec3();
  const ::frame::proto::UniformVector3& uniform_vec3() const;
  ::frame::proto::UniformVector3* release_uniform_vec3();
  ::frame::proto::UniformVector3* mutable_uniform_vec3();
  void set_allocated_uniform_vec3(::frame::proto::UniformVector3* uniform_vec3);
  private:
  const ::frame::proto::UniformVector3& _internal_uniform_vec3() const;
  ::frame::proto::UniformVector3* _internal_mutable_uniform_vec3();
  public:
  void unsafe_arena_set_allocated_uniform_vec3(
      ::frame::proto::UniformVector3* uniform_vec3);
  ::frame::proto::UniformVector3* unsafe_arena_release_uniform_vec3();

  // .frame.proto.UniformVector4 uniform_vec4 = 22;
  bool has_uniform_vec4() const;
  private:
  bool _internal_has_uniform_vec4() const;
  public:
  void clear_uniform_vec4();
  const ::frame::proto::UniformVector4& uniform_vec4() const;
  ::frame::proto::UniformVector4* release_uniform_vec4();
  ::frame::proto::UniformVector4* mutable_uniform_vec4();
  void set_allocated_uniform_vec4(::frame::proto::UniformVector4* uniform_vec4);
  private:
  const ::frame::proto::UniformVector4& _internal_uniform_vec4() const;
  ::frame::proto::UniformVector4* _internal_mutable_uniform_vec4();
  public:
  void unsafe_arena_set_allocated_uniform_vec4(
      ::frame::proto::UniformVector4* uniform_vec4);
  ::frame::proto::UniformVector4* unsafe_arena_release_uniform_vec4();

  // .frame.proto.UniformMatrix4 uniform_mat4 = 31;
  bool has_uniform_mat4() const;
  private:
  bool _internal_has_uniform_mat4() const;
  public:
  void clear_uniform_mat4();
  const ::frame::proto::UniformMatrix4& uniform_mat4() const;
  ::frame::proto::UniformMatrix4* release_uniform_mat4();
  ::frame::proto::UniformMatrix4* mutable_uniform_mat4();
  void set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* uniform_mat4);
  private:
  const ::frame::proto::UniformMatrix4& _internal_uniform_mat4() const;
  ::frame::proto::UniformMatrix4* _internal_mutable_uniform_mat4();
  public:
  void unsafe_arena_set_allocated_uniform_mat4(
      ::frame::proto::UniformMatrix4* uniform_mat4);
  ::frame::proto::UniformMatrix4* unsafe_arena_release_uniform_mat4();

  // .frame.proto.UniformInts uniform_ints = 40;
  bool has_uniform_ints() const;
  private:
  bool _internal_has_uniform_ints() const;
  public:
  void clear_uniform_ints();
  const ::frame::proto::UniformInts& uniform_ints() const;
  ::frame::proto::UniformInts* release_uniform_ints();
  ::frame::proto::UniformInts* mutable_uniform_ints();
  void set_allocated_uniform_ints(::frame::proto::UniformInts* uniform_ints);
  private:
  const ::frame::proto::UniformInts& _internal_uniform_ints() const;
  ::frame::proto::UniformInts* _internal_mutable_uniform_ints();
  public:
  void unsafe_arena_set_allocated_uniform_ints(
      ::frame::proto::UniformInts* uniform_ints);
  ::frame::proto::UniformInts* unsafe_arena_release_uniform_ints();

  // .frame.proto.UniformBools uniform_bools = 41;
  bool has_uniform_bools() const;
  private:
  bool _internal_has_uniform_bools() const;
  public:
  void clear_uniform_bools();
  const ::frame::proto::UniformBools& uniform_bools() const;
  ::frame::proto::UniformBools* release_uniform_bools();
  ::frame::proto::UniformBools* mutable_uniform_bools();
  void set_allocated_uniform_bools(::frame::proto::UniformBools* uniform_bools);
  private:
  const ::frame::proto::UniformBools& _internal_uniform_bools() const;
  ::frame::proto::UniformBools* _internal_mutable_uniform_bools();
  public:
  void unsafe_arena_set_allocated_uniform_bools(
      ::frame::proto::UniformBools* uniform_bools);
  ::frame::proto::UniformBools* unsafe_arena_release_uniform_bools();

  // .frame.proto.UniformFloats uniform_floats = 42;
  bool has_uniform_floats() const;
  private:
  bool _internal_has_uniform_floats() const;
  public:
  void clear_uniform_floats();
  const ::frame::proto::UniformFloats& uniform_floats() const;
  ::frame::proto::UniformFloats* release_uniform_floats();
  ::frame::proto::UniformFloats* mutable_uniform_floats();
  void set_allocated_uniform_floats(::frame::proto::UniformFloats* uniform_floats);
  private:
  const ::frame::proto::UniformFloats& _internal_uniform_floats() const;
  ::frame::proto::UniformFloats* _internal_mutable_uniform_floats();
  public:
  void unsafe_arena_set_allocated_uniform_floats(
      ::frame::proto::UniformFloats* uniform_floats);
  ::frame::proto::UniformFloats* unsafe_arena_release_uniform_floats();

  // .frame.proto.UniformVector2s uniform_vec2s = 50;
  bool has_uniform_vec2s() const;
  private:
  bool _internal_has_uniform_vec2s() const;
  public:
  void clear_uniform_vec2s();
  const ::frame::proto::UniformVector2s& uniform_vec2s() const;
  ::frame::proto::UniformVector2s* release_uniform_vec2s();
  ::frame::proto::UniformVector2s* mutable_uniform_vec2s();
  void set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* uniform_vec2s);
  private:
  const ::frame::proto::UniformVector2s& _internal_uniform_vec2s() const;
  ::frame::proto::UniformVector2s* _internal_mutable_uniform_vec2s();
  public:
  void unsafe_arena_set_allocated_uniform_vec2s(
      ::frame::proto::UniformVector2s* uniform_vec2s);
  ::frame::proto::UniformVector2s* unsafe_arena_release_uniform_vec2s();

  // .frame.proto.UniformVector3s uniform_vec3s = 51;
  bool has_uniform_vec3s() const;
  private:
  bool _internal_has_uniform_vec3s() const;
  public:
  void clear_uniform_vec3s();
  const ::frame::proto::UniformVector3s& uniform_vec3s() const;
  ::frame::proto::UniformVector3s* release_uniform_vec3s();
  ::frame::proto::UniformVector3s* mutable_uniform_vec3s();
  void set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* uniform_vec3s);
  private:
  const ::frame::proto::UniformVector3s& _internal_uniform_vec3s() const;
  ::frame::proto::UniformVector3s* _internal_mutable_uniform_vec3s();
  public:
  void unsafe_arena_set_allocated_uniform_vec3s(
      ::frame::proto::UniformVector3s* uniform_vec3s);
  ::frame::proto::UniformVector3s* unsafe_arena_release_uniform_vec3s();

  // .frame.proto.UniformVector4s uniform_vec4s = 52;
  bool has_uniform_vec4s() const;
  private:
  bool _internal_has_uniform_vec4s() const;
  public:
  void clear_uniform_vec4s();
  const ::frame::proto::UniformVector4s& uniform_vec4s() const;
  ::frame::proto::UniformVector4s* release_uniform_vec4s();
  ::frame::proto::UniformVector4s* mutable_uniform_vec4s();
  void set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* uniform_vec4s);
  private:
  const ::frame::proto::UniformVector4s& _internal_uniform_vec4s() const;
  ::frame::proto::UniformVector4s* _internal_mutable_uniform_vec4s();
  public:
  void unsafe_arena_set_allocated_uniform_vec4s(
      ::frame::proto::UniformVector4s* uniform_vec4s);
  ::frame::proto::UniformVector4s* unsafe_arena_release_uniform_vec4s();

  // .frame.proto.UniformMatrix4s uniform_mat4s = 54;
  bool has_uniform_mat4s() const;
  private:
  bool _internal_has_uniform_mat4s() const;
  public:
  void clear_uniform_mat4s();
  const ::frame::proto::UniformMatrix4s& uniform_mat4s() const;
  ::frame::proto::UniformMatrix4s* release_uniform_mat4s();
  ::frame::proto::UniformMatrix4s* mutable_uniform_mat4s();
  void set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* uniform_mat4s);
  private:
  const ::frame::proto::UniformMatrix4s& _internal_uniform_mat4s() const;
  ::frame::proto::UniformMatrix4s* _internal_mutable_uniform_mat4s();
  public:
  void unsafe_arena_set_allocated_uniform_mat4s(
      ::frame::proto::UniformMatrix4s* uniform_mat4s);
  ::frame::proto::UniformMatrix4s* unsafe_arena_release_uniform_mat4s();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:frame.proto.Uniform)
 private:
  class _Internal;
  void set_has_uniform_int();
  void set_has_uniform_bool();
  void set_has_uniform_float();
  void set_has_uniform_enum();
  void set_has_uniform_vec2();
  void set_has_uniform_vec3();
  void set_has_uniform_vec4();
  void set_has_uniform_mat4();
  void set_has_uniform_ints();
  void set_has_uniform_bools();
  void set_has_uniform_floats();
  void set_has_uniform_vec2s();
  void set_has_uniform_vec3s();
  void set_has_uniform_vec4s();
  void set_has_uniform_mat4s();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 uniform_int_;
    bool uniform_bool_;
    float uniform_float_;
    int uniform_enum_;
    ::frame::proto::UniformVector2* uniform_vec2_;
    ::frame::proto::UniformVector3* uniform_vec3_;
    ::frame::proto::UniformVector4* uniform_vec4_;
    ::frame::proto::UniformMatrix4* uniform_mat4_;
    ::frame::proto::UniformInts* uniform_ints_;
    ::frame::proto::UniformBools* uniform_bools_;
    ::frame::proto::UniformFloats* uniform_floats_;
    ::frame::proto::UniformVector2s* uniform_vec2s_;
    ::frame::proto::UniformVector3s* uniform_vec3s_;
    ::frame::proto::UniformVector4s* uniform_vec4s_;
    ::frame::proto::UniformMatrix4s* uniform_mat4s_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Uniform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uniform

// string name = 1;
inline void Uniform::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Uniform::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.name)
  return _internal_name();
}
inline void Uniform::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.name)
}
inline std::string* Uniform::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.name)
  return _internal_mutable_name();
}
inline const std::string& Uniform::_internal_name() const {
  return name_.Get();
}
inline void Uniform::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Uniform::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Uniform.name)
}
inline void Uniform::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Uniform.name)
}
inline void Uniform::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Uniform.name)
}
inline std::string* Uniform::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Uniform::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Uniform::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.name)
}

// int32 uniform_int = 2;
inline bool Uniform::_internal_has_uniform_int() const {
  return value_case() == kUniformInt;
}
inline void Uniform::set_has_uniform_int() {
  _oneof_case_[0] = kUniformInt;
}
inline void Uniform::clear_uniform_int() {
  if (_internal_has_uniform_int()) {
    value_.uniform_int_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Uniform::_internal_uniform_int() const {
  if (_internal_has_uniform_int()) {
    return value_.uniform_int_;
  }
  return 0;
}
inline void Uniform::_internal_set_uniform_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_uniform_int()) {
    clear_value();
    set_has_uniform_int();
  }
  value_.uniform_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Uniform::uniform_int() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_int)
  return _internal_uniform_int();
}
inline void Uniform::set_uniform_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniform_int(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_int)
}

// bool uniform_bool = 3;
inline bool Uniform::_internal_has_uniform_bool() const {
  return value_case() == kUniformBool;
}
inline void Uniform::set_has_uniform_bool() {
  _oneof_case_[0] = kUniformBool;
}
inline void Uniform::clear_uniform_bool() {
  if (_internal_has_uniform_bool()) {
    value_.uniform_bool_ = false;
    clear_has_value();
  }
}
inline bool Uniform::_internal_uniform_bool() const {
  if (_internal_has_uniform_bool()) {
    return value_.uniform_bool_;
  }
  return false;
}
inline void Uniform::_internal_set_uniform_bool(bool value) {
  if (!_internal_has_uniform_bool()) {
    clear_value();
    set_has_uniform_bool();
  }
  value_.uniform_bool_ = value;
}
inline bool Uniform::uniform_bool() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_bool)
  return _internal_uniform_bool();
}
inline void Uniform::set_uniform_bool(bool value) {
  _internal_set_uniform_bool(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_bool)
}

// float uniform_float = 4;
inline bool Uniform::_internal_has_uniform_float() const {
  return value_case() == kUniformFloat;
}
inline void Uniform::set_has_uniform_float() {
  _oneof_case_[0] = kUniformFloat;
}
inline void Uniform::clear_uniform_float() {
  if (_internal_has_uniform_float()) {
    value_.uniform_float_ = 0;
    clear_has_value();
  }
}
inline float Uniform::_internal_uniform_float() const {
  if (_internal_has_uniform_float()) {
    return value_.uniform_float_;
  }
  return 0;
}
inline void Uniform::_internal_set_uniform_float(float value) {
  if (!_internal_has_uniform_float()) {
    clear_value();
    set_has_uniform_float();
  }
  value_.uniform_float_ = value;
}
inline float Uniform::uniform_float() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_float)
  return _internal_uniform_float();
}
inline void Uniform::set_uniform_float(float value) {
  _internal_set_uniform_float(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_float)
}

// .frame.proto.Uniform.UniformEnum uniform_enum = 10;
inline bool Uniform::_internal_has_uniform_enum() const {
  return value_case() == kUniformEnum;
}
inline void Uniform::set_has_uniform_enum() {
  _oneof_case_[0] = kUniformEnum;
}
inline void Uniform::clear_uniform_enum() {
  if (_internal_has_uniform_enum()) {
    value_.uniform_enum_ = 0;
    clear_has_value();
  }
}
inline ::frame::proto::Uniform_UniformEnum Uniform::_internal_uniform_enum() const {
  if (_internal_has_uniform_enum()) {
    return static_cast< ::frame::proto::Uniform_UniformEnum >(value_.uniform_enum_);
  }
  return static_cast< ::frame::proto::Uniform_UniformEnum >(0);
}
inline ::frame::proto::Uniform_UniformEnum Uniform::uniform_enum() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_enum)
  return _internal_uniform_enum();
}
inline void Uniform::_internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  if (!_internal_has_uniform_enum()) {
    clear_value();
    set_has_uniform_enum();
  }
  value_.uniform_enum_ = value;
}
inline void Uniform::set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_enum)
  _internal_set_uniform_enum(value);
}

// .frame.proto.UniformVector2 uniform_vec2 = 20;
inline bool Uniform::_internal_has_uniform_vec2() const {
  return value_case() == kUniformVec2;
}
inline bool Uniform::has_uniform_vec2() const {
  return _internal_has_uniform_vec2();
}
inline void Uniform::set_has_uniform_vec2() {
  _oneof_case_[0] = kUniformVec2;
}
inline ::frame::proto::UniformVector2* Uniform::release_uniform_vec2() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec2)
  if (_internal_has_uniform_vec2()) {
    clear_has_value();
      ::frame::proto::UniformVector2* temp = value_.uniform_vec2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector2& Uniform::_internal_uniform_vec2() const {
  return _internal_has_uniform_vec2()
      ? *value_.uniform_vec2_
      : *reinterpret_cast< ::frame::proto::UniformVector2*>(&::frame::proto::_UniformVector2_default_instance_);
}
inline const ::frame::proto::UniformVector2& Uniform::uniform_vec2() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec2)
  return _internal_uniform_vec2();
}
inline ::frame::proto::UniformVector2* Uniform::unsafe_arena_release_uniform_vec2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec2)
  if (_internal_has_uniform_vec2()) {
    clear_has_value();
    ::frame::proto::UniformVector2* temp = value_.uniform_vec2_;
    value_.uniform_vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec2(::frame::proto::UniformVector2* uniform_vec2) {
  clear_value();
  if (uniform_vec2) {
    set_has_uniform_vec2();
    value_.uniform_vec2_ = uniform_vec2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec2)
}
inline ::frame::proto::UniformVector2* Uniform::_internal_mutable_uniform_vec2() {
  if (!_internal_has_uniform_vec2()) {
    clear_value();
    set_has_uniform_vec2();
    value_.uniform_vec2_ = CreateMaybeMessage< ::frame::proto::UniformVector2 >(GetArena());
  }
  return value_.uniform_vec2_;
}
inline ::frame::proto::UniformVector2* Uniform::mutable_uniform_vec2() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec2)
  return _internal_mutable_uniform_vec2();
}

// .frame.proto.UniformVector3 uniform_vec3 = 21;
inline bool Uniform::_internal_has_uniform_vec3() const {
  return value_case() == kUniformVec3;
}
inline bool Uniform::has_uniform_vec3() const {
  return _internal_has_uniform_vec3();
}
inline void Uniform::set_has_uniform_vec3() {
  _oneof_case_[0] = kUniformVec3;
}
inline ::frame::proto::UniformVector3* Uniform::release_uniform_vec3() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec3)
  if (_internal_has_uniform_vec3()) {
    clear_has_value();
      ::frame::proto::UniformVector3* temp = value_.uniform_vec3_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector3& Uniform::_internal_uniform_vec3() const {
  return _internal_has_uniform_vec3()
      ? *value_.uniform_vec3_
      : *reinterpret_cast< ::frame::proto::UniformVector3*>(&::frame::proto::_UniformVector3_default_instance_);
}
inline const ::frame::proto::UniformVector3& Uniform::uniform_vec3() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec3)
  return _internal_uniform_vec3();
}
inline ::frame::proto::UniformVector3* Uniform::unsafe_arena_release_uniform_vec3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec3)
  if (_internal_has_uniform_vec3()) {
    clear_has_value();
    ::frame::proto::UniformVector3* temp = value_.uniform_vec3_;
    value_.uniform_vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec3(::frame::proto::UniformVector3* uniform_vec3) {
  clear_value();
  if (uniform_vec3) {
    set_has_uniform_vec3();
    value_.uniform_vec3_ = uniform_vec3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec3)
}
inline ::frame::proto::UniformVector3* Uniform::_internal_mutable_uniform_vec3() {
  if (!_internal_has_uniform_vec3()) {
    clear_value();
    set_has_uniform_vec3();
    value_.uniform_vec3_ = CreateMaybeMessage< ::frame::proto::UniformVector3 >(GetArena());
  }
  return value_.uniform_vec3_;
}
inline ::frame::proto::UniformVector3* Uniform::mutable_uniform_vec3() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec3)
  return _internal_mutable_uniform_vec3();
}

// .frame.proto.UniformVector4 uniform_vec4 = 22;
inline bool Uniform::_internal_has_uniform_vec4() const {
  return value_case() == kUniformVec4;
}
inline bool Uniform::has_uniform_vec4() const {
  return _internal_has_uniform_vec4();
}
inline void Uniform::set_has_uniform_vec4() {
  _oneof_case_[0] = kUniformVec4;
}
inline ::frame::proto::UniformVector4* Uniform::release_uniform_vec4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec4)
  if (_internal_has_uniform_vec4()) {
    clear_has_value();
      ::frame::proto::UniformVector4* temp = value_.uniform_vec4_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector4& Uniform::_internal_uniform_vec4() const {
  return _internal_has_uniform_vec4()
      ? *value_.uniform_vec4_
      : *reinterpret_cast< ::frame::proto::UniformVector4*>(&::frame::proto::_UniformVector4_default_instance_);
}
inline const ::frame::proto::UniformVector4& Uniform::uniform_vec4() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec4)
  return _internal_uniform_vec4();
}
inline ::frame::proto::UniformVector4* Uniform::unsafe_arena_release_uniform_vec4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec4)
  if (_internal_has_uniform_vec4()) {
    clear_has_value();
    ::frame::proto::UniformVector4* temp = value_.uniform_vec4_;
    value_.uniform_vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec4(::frame::proto::UniformVector4* uniform_vec4) {
  clear_value();
  if (uniform_vec4) {
    set_has_uniform_vec4();
    value_.uniform_vec4_ = uniform_vec4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec4)
}
inline ::frame::proto::UniformVector4* Uniform::_internal_mutable_uniform_vec4() {
  if (!_internal_has_uniform_vec4()) {
    clear_value();
    set_has_uniform_vec4();
    value_.uniform_vec4_ = CreateMaybeMessage< ::frame::proto::UniformVector4 >(GetArena());
  }
  return value_.uniform_vec4_;
}
inline ::frame::proto::UniformVector4* Uniform::mutable_uniform_vec4() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec4)
  return _internal_mutable_uniform_vec4();
}

// .frame.proto.UniformMatrix4 uniform_mat4 = 31;
inline bool Uniform::_internal_has_uniform_mat4() const {
  return value_case() == kUniformMat4;
}
inline bool Uniform::has_uniform_mat4() const {
  return _internal_has_uniform_mat4();
}
inline void Uniform::set_has_uniform_mat4() {
  _oneof_case_[0] = kUniformMat4;
}
inline ::frame::proto::UniformMatrix4* Uniform::release_uniform_mat4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_mat4)
  if (_internal_has_uniform_mat4()) {
    clear_has_value();
      ::frame::proto::UniformMatrix4* temp = value_.uniform_mat4_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformMatrix4& Uniform::_internal_uniform_mat4() const {
  return _internal_has_uniform_mat4()
      ? *value_.uniform_mat4_
      : *reinterpret_cast< ::frame::proto::UniformMatrix4*>(&::frame::proto::_UniformMatrix4_default_instance_);
}
inline const ::frame::proto::UniformMatrix4& Uniform::uniform_mat4() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_mat4)
  return _internal_uniform_mat4();
}
inline ::frame::proto::UniformMatrix4* Uniform::unsafe_arena_release_uniform_mat4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_mat4)
  if (_internal_has_uniform_mat4()) {
    clear_has_value();
    ::frame::proto::UniformMatrix4* temp = value_.uniform_mat4_;
    value_.uniform_mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* uniform_mat4) {
  clear_value();
  if (uniform_mat4) {
    set_has_uniform_mat4();
    value_.uniform_mat4_ = uniform_mat4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_mat4)
}
inline ::frame::proto::UniformMatrix4* Uniform::_internal_mutable_uniform_mat4() {
  if (!_internal_has_uniform_mat4()) {
    clear_value();
    set_has_uniform_mat4();
    value_.uniform_mat4_ = CreateMaybeMessage< ::frame::proto::UniformMatrix4 >(GetArena());
  }
  return value_.uniform_mat4_;
}
inline ::frame::proto::UniformMatrix4* Uniform::mutable_uniform_mat4() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_mat4)
  return _internal_mutable_uniform_mat4();
}

// .frame.proto.UniformInts uniform_ints = 40;
inline bool Uniform::_internal_has_uniform_ints() const {
  return value_case() == kUniformInts;
}
inline bool Uniform::has_uniform_ints() const {
  return _internal_has_uniform_ints();
}
inline void Uniform::set_has_uniform_ints() {
  _oneof_case_[0] = kUniformInts;
}
inline ::frame::proto::UniformInts* Uniform::release_uniform_ints() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_ints)
  if (_internal_has_uniform_ints()) {
    clear_has_value();
      ::frame::proto::UniformInts* temp = value_.uniform_ints_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_ints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformInts& Uniform::_internal_uniform_ints() const {
  return _internal_has_uniform_ints()
      ? *value_.uniform_ints_
      : *reinterpret_cast< ::frame::proto::UniformInts*>(&::frame::proto::_UniformInts_default_instance_);
}
inline const ::frame::proto::UniformInts& Uniform::uniform_ints() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_ints)
  return _internal_uniform_ints();
}
inline ::frame::proto::UniformInts* Uniform::unsafe_arena_release_uniform_ints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_ints)
  if (_internal_has_uniform_ints()) {
    clear_has_value();
    ::frame::proto::UniformInts* temp = value_.uniform_ints_;
    value_.uniform_ints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_ints(::frame::proto::UniformInts* uniform_ints) {
  clear_value();
  if (uniform_ints) {
    set_has_uniform_ints();
    value_.uniform_ints_ = uniform_ints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_ints)
}
inline ::frame::proto::UniformInts* Uniform::_internal_mutable_uniform_ints() {
  if (!_internal_has_uniform_ints()) {
    clear_value();
    set_has_uniform_ints();
    value_.uniform_ints_ = CreateMaybeMessage< ::frame::proto::UniformInts >(GetArena());
  }
  return value_.uniform_ints_;
}
inline ::frame::proto::UniformInts* Uniform::mutable_uniform_ints() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_ints)
  return _internal_mutable_uniform_ints();
}

// .frame.proto.UniformBools uniform_bools = 41;
inline bool Uniform::_internal_has_uniform_bools() const {
  return value_case() == kUniformBools;
}
inline bool Uniform::has_uniform_bools() const {
  return _internal_has_uniform_bools();
}
inline void Uniform::set_has_uniform_bools() {
  _oneof_case_[0] = kUniformBools;
}
inline ::frame::proto::UniformBools* Uniform::release_uniform_bools() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_bools)
  if (_internal_has_uniform_bools()) {
    clear_has_value();
      ::frame::proto::UniformBools* temp = value_.uniform_bools_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_bools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformBools& Uniform::_internal_uniform_bools() const {
  return _internal_has_uniform_bools()
      ? *value_.uniform_bools_
      : *reinterpret_cast< ::frame::proto::UniformBools*>(&::frame::proto::_UniformBools_default_instance_);
}
inline const ::frame::proto::UniformBools& Uniform::uniform_bools() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_bools)
  return _internal_uniform_bools();
}
inline ::frame::proto::UniformBools* Uniform::unsafe_arena_release_uniform_bools() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_bools)
  if (_internal_has_uniform_bools()) {
    clear_has_value();
    ::frame::proto::UniformBools* temp = value_.uniform_bools_;
    value_.uniform_bools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_bools(::frame::proto::UniformBools* uniform_bools) {
  clear_value();
  if (uniform_bools) {
    set_has_uniform_bools();
    value_.uniform_bools_ = uniform_bools;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_bools)
}
inline ::frame::proto::UniformBools* Uniform::_internal_mutable_uniform_bools() {
  if (!_internal_has_uniform_bools()) {
    clear_value();
    set_has_uniform_bools();
    value_.uniform_bools_ = CreateMaybeMessage< ::frame::proto::UniformBools >(GetArena());
  }
  return value_.uniform_bools_;
}
inline ::frame::proto::UniformBools* Uniform::mutable_uniform_bools() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_bools)
  return _internal_mutable_uniform_bools();
}

// .frame.proto.UniformFloats uniform_floats = 42;
inline bool Uniform::_internal_has_uniform_floats() const {
  return value_case() == kUniformFloats;
}
inline bool Uniform::has_uniform_floats() const {
  return _internal_has_uniform_floats();
}
inline void Uniform::set_has_uniform_floats() {
  _oneof_case_[0] = kUniformFloats;
}
inline ::frame::proto::UniformFloats* Uniform::release_uniform_floats() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_floats)
  if (_internal_has_uniform_floats()) {
    clear_has_value();
      ::frame::proto::UniformFloats* temp = value_.uniform_floats_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_floats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformFloats& Uniform::_internal_uniform_floats() const {
  return _internal_has_uniform_floats()
      ? *value_.uniform_floats_
      : *reinterpret_cast< ::frame::proto::UniformFloats*>(&::frame::proto::_UniformFloats_default_instance_);
}
inline const ::frame::proto::UniformFloats& Uniform::uniform_floats() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_floats)
  return _internal_uniform_floats();
}
inline ::frame::proto::UniformFloats* Uniform::unsafe_arena_release_uniform_floats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_floats)
  if (_internal_has_uniform_floats()) {
    clear_has_value();
    ::frame::proto::UniformFloats* temp = value_.uniform_floats_;
    value_.uniform_floats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_floats(::frame::proto::UniformFloats* uniform_floats) {
  clear_value();
  if (uniform_floats) {
    set_has_uniform_floats();
    value_.uniform_floats_ = uniform_floats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_floats)
}
inline ::frame::proto::UniformFloats* Uniform::_internal_mutable_uniform_floats() {
  if (!_internal_has_uniform_floats()) {
    clear_value();
    set_has_uniform_floats();
    value_.uniform_floats_ = CreateMaybeMessage< ::frame::proto::UniformFloats >(GetArena());
  }
  return value_.uniform_floats_;
}
inline ::frame::proto::UniformFloats* Uniform::mutable_uniform_floats() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_floats)
  return _internal_mutable_uniform_floats();
}

// .frame.proto.UniformVector2s uniform_vec2s = 50;
inline bool Uniform::_internal_has_uniform_vec2s() const {
  return value_case() == kUniformVec2S;
}
inline bool Uniform::has_uniform_vec2s() const {
  return _internal_has_uniform_vec2s();
}
inline void Uniform::set_has_uniform_vec2s() {
  _oneof_case_[0] = kUniformVec2S;
}
inline ::frame::proto::UniformVector2s* Uniform::release_uniform_vec2s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec2s)
  if (_internal_has_uniform_vec2s()) {
    clear_has_value();
      ::frame::proto::UniformVector2s* temp = value_.uniform_vec2s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector2s& Uniform::_internal_uniform_vec2s() const {
  return _internal_has_uniform_vec2s()
      ? *value_.uniform_vec2s_
      : *reinterpret_cast< ::frame::proto::UniformVector2s*>(&::frame::proto::_UniformVector2s_default_instance_);
}
inline const ::frame::proto::UniformVector2s& Uniform::uniform_vec2s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec2s)
  return _internal_uniform_vec2s();
}
inline ::frame::proto::UniformVector2s* Uniform::unsafe_arena_release_uniform_vec2s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec2s)
  if (_internal_has_uniform_vec2s()) {
    clear_has_value();
    ::frame::proto::UniformVector2s* temp = value_.uniform_vec2s_;
    value_.uniform_vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* uniform_vec2s) {
  clear_value();
  if (uniform_vec2s) {
    set_has_uniform_vec2s();
    value_.uniform_vec2s_ = uniform_vec2s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec2s)
}
inline ::frame::proto::UniformVector2s* Uniform::_internal_mutable_uniform_vec2s() {
  if (!_internal_has_uniform_vec2s()) {
    clear_value();
    set_has_uniform_vec2s();
    value_.uniform_vec2s_ = CreateMaybeMessage< ::frame::proto::UniformVector2s >(GetArena());
  }
  return value_.uniform_vec2s_;
}
inline ::frame::proto::UniformVector2s* Uniform::mutable_uniform_vec2s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec2s)
  return _internal_mutable_uniform_vec2s();
}

// .frame.proto.UniformVector3s uniform_vec3s = 51;
inline bool Uniform::_internal_has_uniform_vec3s() const {
  return value_case() == kUniformVec3S;
}
inline bool Uniform::has_uniform_vec3s() const {
  return _internal_has_uniform_vec3s();
}
inline void Uniform::set_has_uniform_vec3s() {
  _oneof_case_[0] = kUniformVec3S;
}
inline ::frame::proto::UniformVector3s* Uniform::release_uniform_vec3s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec3s)
  if (_internal_has_uniform_vec3s()) {
    clear_has_value();
      ::frame::proto::UniformVector3s* temp = value_.uniform_vec3s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector3s& Uniform::_internal_uniform_vec3s() const {
  return _internal_has_uniform_vec3s()
      ? *value_.uniform_vec3s_
      : *reinterpret_cast< ::frame::proto::UniformVector3s*>(&::frame::proto::_UniformVector3s_default_instance_);
}
inline const ::frame::proto::UniformVector3s& Uniform::uniform_vec3s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec3s)
  return _internal_uniform_vec3s();
}
inline ::frame::proto::UniformVector3s* Uniform::unsafe_arena_release_uniform_vec3s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec3s)
  if (_internal_has_uniform_vec3s()) {
    clear_has_value();
    ::frame::proto::UniformVector3s* temp = value_.uniform_vec3s_;
    value_.uniform_vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* uniform_vec3s) {
  clear_value();
  if (uniform_vec3s) {
    set_has_uniform_vec3s();
    value_.uniform_vec3s_ = uniform_vec3s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec3s)
}
inline ::frame::proto::UniformVector3s* Uniform::_internal_mutable_uniform_vec3s() {
  if (!_internal_has_uniform_vec3s()) {
    clear_value();
    set_has_uniform_vec3s();
    value_.uniform_vec3s_ = CreateMaybeMessage< ::frame::proto::UniformVector3s >(GetArena());
  }
  return value_.uniform_vec3s_;
}
inline ::frame::proto::UniformVector3s* Uniform::mutable_uniform_vec3s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec3s)
  return _internal_mutable_uniform_vec3s();
}

// .frame.proto.UniformVector4s uniform_vec4s = 52;
inline bool Uniform::_internal_has_uniform_vec4s() const {
  return value_case() == kUniformVec4S;
}
inline bool Uniform::has_uniform_vec4s() const {
  return _internal_has_uniform_vec4s();
}
inline void Uniform::set_has_uniform_vec4s() {
  _oneof_case_[0] = kUniformVec4S;
}
inline ::frame::proto::UniformVector4s* Uniform::release_uniform_vec4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec4s)
  if (_internal_has_uniform_vec4s()) {
    clear_has_value();
      ::frame::proto::UniformVector4s* temp = value_.uniform_vec4s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector4s& Uniform::_internal_uniform_vec4s() const {
  return _internal_has_uniform_vec4s()
      ? *value_.uniform_vec4s_
      : *reinterpret_cast< ::frame::proto::UniformVector4s*>(&::frame::proto::_UniformVector4s_default_instance_);
}
inline const ::frame::proto::UniformVector4s& Uniform::uniform_vec4s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec4s)
  return _internal_uniform_vec4s();
}
inline ::frame::proto::UniformVector4s* Uniform::unsafe_arena_release_uniform_vec4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec4s)
  if (_internal_has_uniform_vec4s()) {
    clear_has_value();
    ::frame::proto::UniformVector4s* temp = value_.uniform_vec4s_;
    value_.uniform_vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* uniform_vec4s) {
  clear_value();
  if (uniform_vec4s) {
    set_has_uniform_vec4s();
    value_.uniform_vec4s_ = uniform_vec4s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec4s)
}
inline ::frame::proto::UniformVector4s* Uniform::_internal_mutable_uniform_vec4s() {
  if (!_internal_has_uniform_vec4s()) {
    clear_value();
    set_has_uniform_vec4s();
    value_.uniform_vec4s_ = CreateMaybeMessage< ::frame::proto::UniformVector4s >(GetArena());
  }
  return value_.uniform_vec4s_;
}
inline ::frame::proto::UniformVector4s* Uniform::mutable_uniform_vec4s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec4s)
  return _internal_mutable_uniform_vec4s();
}

// .frame.proto.UniformMatrix4s uniform_mat4s = 54;
inline bool Uniform::_internal_has_uniform_mat4s() const {
  return value_case() == kUniformMat4S;
}
inline bool Uniform::has_uniform_mat4s() const {
  return _internal_has_uniform_mat4s();
}
inline void Uniform::set_has_uniform_mat4s() {
  _oneof_case_[0] = kUniformMat4S;
}
inline ::frame::proto::UniformMatrix4s* Uniform::release_uniform_mat4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_mat4s)
  if (_internal_has_uniform_mat4s()) {
    clear_has_value();
      ::frame::proto::UniformMatrix4s* temp = value_.uniform_mat4s_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uniform_mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformMatrix4s& Uniform::_internal_uniform_mat4s() const {
  return _internal_has_uniform_mat4s()
      ? *value_.uniform_mat4s_
      : *reinterpret_cast< ::frame::proto::UniformMatrix4s*>(&::frame::proto::_UniformMatrix4s_default_instance_);
}
inline const ::frame::proto::UniformMatrix4s& Uniform::uniform_mat4s() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_mat4s)
  return _internal_uniform_mat4s();
}
inline ::frame::proto::UniformMatrix4s* Uniform::unsafe_arena_release_uniform_mat4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_mat4s)
  if (_internal_has_uniform_mat4s()) {
    clear_has_value();
    ::frame::proto::UniformMatrix4s* temp = value_.uniform_mat4s_;
    value_.uniform_mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* uniform_mat4s) {
  clear_value();
  if (uniform_mat4s) {
    set_has_uniform_mat4s();
    value_.uniform_mat4s_ = uniform_mat4s;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_mat4s)
}
inline ::frame::proto::UniformMatrix4s* Uniform::_internal_mutable_uniform_mat4s() {
  if (!_internal_has_uniform_mat4s()) {
    clear_value();
    set_has_uniform_mat4s();
    value_.uniform_mat4s_ = CreateMaybeMessage< ::frame::proto::UniformMatrix4s >(GetArena());
  }
  return value_.uniform_mat4s_;
}
inline ::frame::proto::UniformMatrix4s* Uniform::mutable_uniform_mat4s() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_mat4s)
  return _internal_mutable_uniform_mat4s();
}

inline bool Uniform::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Uniform::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Uniform::ValueCase Uniform::value_case() const {
  return Uniform::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frame::proto::Uniform_UniformEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::Uniform_UniformEnum>() {
  return ::frame::proto::Uniform_UniformEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Uniform_2eproto
