// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Uniform.proto

#include "Uniform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformBools_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformFloats_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformInts_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformMatrix4_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniformMatrix4s_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformVector2_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniformVector2s_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformVector3_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniformVector3s_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformVector4_Math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UniformVector4s_Math_2eproto;
namespace frame {
namespace proto {
class UniformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uniform> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 uniform_int_;
  bool uniform_bool_;
  float uniform_float_;
  int uniform_enum_;
  const ::frame::proto::UniformVector2* uniform_vec2_;
  const ::frame::proto::UniformVector3* uniform_vec3_;
  const ::frame::proto::UniformVector4* uniform_vec4_;
  const ::frame::proto::UniformMatrix4* uniform_mat4_;
  const ::frame::proto::UniformInts* uniform_ints_;
  const ::frame::proto::UniformBools* uniform_bools_;
  const ::frame::proto::UniformFloats* uniform_floats_;
  const ::frame::proto::UniformVector2s* uniform_vec2s_;
  const ::frame::proto::UniformVector3s* uniform_vec3s_;
  const ::frame::proto::UniformVector4s* uniform_vec4s_;
  const ::frame::proto::UniformMatrix4s* uniform_mat4s_;
} _Uniform_default_instance_;
}  // namespace proto
}  // namespace frame
static void InitDefaultsscc_info_Uniform_Uniform_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::proto::_Uniform_default_instance_;
    new (ptr) ::frame::proto::Uniform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::proto::Uniform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Uniform_Uniform_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Uniform_Uniform_2eproto}, {
      &scc_info_UniformVector2_Math_2eproto.base,
      &scc_info_UniformVector3_Math_2eproto.base,
      &scc_info_UniformVector4_Math_2eproto.base,
      &scc_info_UniformMatrix4_Math_2eproto.base,
      &scc_info_UniformInts_Math_2eproto.base,
      &scc_info_UniformBools_Math_2eproto.base,
      &scc_info_UniformFloats_Math_2eproto.base,
      &scc_info_UniformVector2s_Math_2eproto.base,
      &scc_info_UniformVector3s_Math_2eproto.base,
      &scc_info_UniformVector4s_Math_2eproto.base,
      &scc_info_UniformMatrix4s_Math_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Uniform_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Uniform_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Uniform_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Uniform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::proto::Uniform, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::frame::proto::Uniform, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::proto::Uniform, name_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_int_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_bool_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_float_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_enum_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_vec2_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_vec3_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_vec4_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_mat4_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_ints_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_bools_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_floats_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_vec2s_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_vec3s_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_vec4s_),
  offsetof(::frame::proto::UniformDefaultTypeInternal, uniform_mat4s_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Uniform, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frame::proto::Uniform)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::proto::_Uniform_default_instance_),
};

const char descriptor_table_protodef_Uniform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rUniform.proto\022\013frame.proto\032\nMath.proto"
  "\"\264\007\n\007Uniform\022\014\n\004name\030\001 \001(\t\022\025\n\013uniform_in"
  "t\030\002 \001(\005H\000\022\026\n\014uniform_bool\030\003 \001(\010H\000\022\027\n\runi"
  "form_float\030\004 \001(\002H\000\0228\n\014uniform_enum\030\n \001(\016"
  "2 .frame.proto.Uniform.UniformEnumH\000\0223\n\014"
  "uniform_vec2\030\024 \001(\0132\033.frame.proto.Uniform"
  "Vector2H\000\0223\n\014uniform_vec3\030\025 \001(\0132\033.frame."
  "proto.UniformVector3H\000\0223\n\014uniform_vec4\030\026"
  " \001(\0132\033.frame.proto.UniformVector4H\000\0223\n\014u"
  "niform_mat4\030\037 \001(\0132\033.frame.proto.UniformM"
  "atrix4H\000\0220\n\014uniform_ints\030( \001(\0132\030.frame.p"
  "roto.UniformIntsH\000\0222\n\runiform_bools\030) \001("
  "\0132\031.frame.proto.UniformBoolsH\000\0224\n\016unifor"
  "m_floats\030* \001(\0132\032.frame.proto.UniformFloa"
  "tsH\000\0225\n\runiform_vec2s\0302 \001(\0132\034.frame.prot"
  "o.UniformVector2sH\000\0225\n\runiform_vec3s\0303 \001"
  "(\0132\034.frame.proto.UniformVector3sH\000\0225\n\run"
  "iform_vec4s\0304 \001(\0132\034.frame.proto.UniformV"
  "ector4sH\000\0225\n\runiform_mat4s\0306 \001(\0132\034.frame"
  ".proto.UniformMatrix4sH\000\"\303\001\n\013UniformEnum"
  "\022\013\n\007INVALID\020\000\022\023\n\017PROJECTION_MAT4\020\n\022\027\n\023PR"
  "OJECTION_INV_MAT4\020\013\022\r\n\tVIEW_MAT4\020\024\022\021\n\rVI"
  "EW_INV_MAT4\020\025\022\016\n\nMODEL_MAT4\020\036\022\022\n\016MODEL_I"
  "NV_MAT4\020\037\022\030\n\024CAMERA_POSITION_VEC3\020(\022\031\n\025C"
  "AMERA_DIRECTION_VEC3\020)B\007\n\005valueb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Uniform_2eproto_deps[1] = {
  &::descriptor_table_Math_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Uniform_2eproto_sccs[1] = {
  &scc_info_Uniform_Uniform_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Uniform_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Uniform_2eproto = {
  false, false, descriptor_table_protodef_Uniform_2eproto, "Uniform.proto", 999,
  &descriptor_table_Uniform_2eproto_once, descriptor_table_Uniform_2eproto_sccs, descriptor_table_Uniform_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_Uniform_2eproto::offsets,
  file_level_metadata_Uniform_2eproto, 1, file_level_enum_descriptors_Uniform_2eproto, file_level_service_descriptors_Uniform_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Uniform_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Uniform_2eproto)), true);
namespace frame {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Uniform_UniformEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Uniform_2eproto);
  return file_level_enum_descriptors_Uniform_2eproto[0];
}
bool Uniform_UniformEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 20:
    case 21:
    case 30:
    case 31:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Uniform_UniformEnum Uniform::INVALID;
constexpr Uniform_UniformEnum Uniform::PROJECTION_MAT4;
constexpr Uniform_UniformEnum Uniform::PROJECTION_INV_MAT4;
constexpr Uniform_UniformEnum Uniform::VIEW_MAT4;
constexpr Uniform_UniformEnum Uniform::VIEW_INV_MAT4;
constexpr Uniform_UniformEnum Uniform::MODEL_MAT4;
constexpr Uniform_UniformEnum Uniform::MODEL_INV_MAT4;
constexpr Uniform_UniformEnum Uniform::CAMERA_POSITION_VEC3;
constexpr Uniform_UniformEnum Uniform::CAMERA_DIRECTION_VEC3;
constexpr Uniform_UniformEnum Uniform::UniformEnum_MIN;
constexpr Uniform_UniformEnum Uniform::UniformEnum_MAX;
constexpr int Uniform::UniformEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Uniform::InitAsDefaultInstance() {
  ::frame::proto::_Uniform_default_instance_.uniform_int_ = 0;
  ::frame::proto::_Uniform_default_instance_.uniform_bool_ = false;
  ::frame::proto::_Uniform_default_instance_.uniform_float_ = 0;
  ::frame::proto::_Uniform_default_instance_.uniform_enum_ = 0;
  ::frame::proto::_Uniform_default_instance_.uniform_vec2_ = const_cast< ::frame::proto::UniformVector2*>(
      ::frame::proto::UniformVector2::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_vec3_ = const_cast< ::frame::proto::UniformVector3*>(
      ::frame::proto::UniformVector3::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_vec4_ = const_cast< ::frame::proto::UniformVector4*>(
      ::frame::proto::UniformVector4::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_mat4_ = const_cast< ::frame::proto::UniformMatrix4*>(
      ::frame::proto::UniformMatrix4::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_ints_ = const_cast< ::frame::proto::UniformInts*>(
      ::frame::proto::UniformInts::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_bools_ = const_cast< ::frame::proto::UniformBools*>(
      ::frame::proto::UniformBools::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_floats_ = const_cast< ::frame::proto::UniformFloats*>(
      ::frame::proto::UniformFloats::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_vec2s_ = const_cast< ::frame::proto::UniformVector2s*>(
      ::frame::proto::UniformVector2s::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_vec3s_ = const_cast< ::frame::proto::UniformVector3s*>(
      ::frame::proto::UniformVector3s::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_vec4s_ = const_cast< ::frame::proto::UniformVector4s*>(
      ::frame::proto::UniformVector4s::internal_default_instance());
  ::frame::proto::_Uniform_default_instance_.uniform_mat4s_ = const_cast< ::frame::proto::UniformMatrix4s*>(
      ::frame::proto::UniformMatrix4s::internal_default_instance());
}
class Uniform::_Internal {
 public:
  static const ::frame::proto::UniformVector2& uniform_vec2(const Uniform* msg);
  static const ::frame::proto::UniformVector3& uniform_vec3(const Uniform* msg);
  static const ::frame::proto::UniformVector4& uniform_vec4(const Uniform* msg);
  static const ::frame::proto::UniformMatrix4& uniform_mat4(const Uniform* msg);
  static const ::frame::proto::UniformInts& uniform_ints(const Uniform* msg);
  static const ::frame::proto::UniformBools& uniform_bools(const Uniform* msg);
  static const ::frame::proto::UniformFloats& uniform_floats(const Uniform* msg);
  static const ::frame::proto::UniformVector2s& uniform_vec2s(const Uniform* msg);
  static const ::frame::proto::UniformVector3s& uniform_vec3s(const Uniform* msg);
  static const ::frame::proto::UniformVector4s& uniform_vec4s(const Uniform* msg);
  static const ::frame::proto::UniformMatrix4s& uniform_mat4s(const Uniform* msg);
};

const ::frame::proto::UniformVector2&
Uniform::_Internal::uniform_vec2(const Uniform* msg) {
  return *msg->value_.uniform_vec2_;
}
const ::frame::proto::UniformVector3&
Uniform::_Internal::uniform_vec3(const Uniform* msg) {
  return *msg->value_.uniform_vec3_;
}
const ::frame::proto::UniformVector4&
Uniform::_Internal::uniform_vec4(const Uniform* msg) {
  return *msg->value_.uniform_vec4_;
}
const ::frame::proto::UniformMatrix4&
Uniform::_Internal::uniform_mat4(const Uniform* msg) {
  return *msg->value_.uniform_mat4_;
}
const ::frame::proto::UniformInts&
Uniform::_Internal::uniform_ints(const Uniform* msg) {
  return *msg->value_.uniform_ints_;
}
const ::frame::proto::UniformBools&
Uniform::_Internal::uniform_bools(const Uniform* msg) {
  return *msg->value_.uniform_bools_;
}
const ::frame::proto::UniformFloats&
Uniform::_Internal::uniform_floats(const Uniform* msg) {
  return *msg->value_.uniform_floats_;
}
const ::frame::proto::UniformVector2s&
Uniform::_Internal::uniform_vec2s(const Uniform* msg) {
  return *msg->value_.uniform_vec2s_;
}
const ::frame::proto::UniformVector3s&
Uniform::_Internal::uniform_vec3s(const Uniform* msg) {
  return *msg->value_.uniform_vec3s_;
}
const ::frame::proto::UniformVector4s&
Uniform::_Internal::uniform_vec4s(const Uniform* msg) {
  return *msg->value_.uniform_vec4s_;
}
const ::frame::proto::UniformMatrix4s&
Uniform::_Internal::uniform_mat4s(const Uniform* msg) {
  return *msg->value_.uniform_mat4s_;
}
void Uniform::set_allocated_uniform_vec2(::frame::proto::UniformVector2* uniform_vec2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_vec2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_vec2)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_vec2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_vec2, submessage_arena);
    }
    set_has_uniform_vec2();
    value_.uniform_vec2_ = uniform_vec2;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_vec2)
}
void Uniform::clear_uniform_vec2() {
  if (_internal_has_uniform_vec2()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_vec2_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_vec3(::frame::proto::UniformVector3* uniform_vec3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_vec3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_vec3)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_vec3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_vec3, submessage_arena);
    }
    set_has_uniform_vec3();
    value_.uniform_vec3_ = uniform_vec3;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_vec3)
}
void Uniform::clear_uniform_vec3() {
  if (_internal_has_uniform_vec3()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_vec3_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_vec4(::frame::proto::UniformVector4* uniform_vec4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_vec4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_vec4)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_vec4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_vec4, submessage_arena);
    }
    set_has_uniform_vec4();
    value_.uniform_vec4_ = uniform_vec4;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_vec4)
}
void Uniform::clear_uniform_vec4() {
  if (_internal_has_uniform_vec4()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_vec4_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* uniform_mat4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_mat4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_mat4)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_mat4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_mat4, submessage_arena);
    }
    set_has_uniform_mat4();
    value_.uniform_mat4_ = uniform_mat4;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_mat4)
}
void Uniform::clear_uniform_mat4() {
  if (_internal_has_uniform_mat4()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_mat4_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_ints(::frame::proto::UniformInts* uniform_ints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_ints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_ints)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_ints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_ints, submessage_arena);
    }
    set_has_uniform_ints();
    value_.uniform_ints_ = uniform_ints;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_ints)
}
void Uniform::clear_uniform_ints() {
  if (_internal_has_uniform_ints()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_ints_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_bools(::frame::proto::UniformBools* uniform_bools) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_bools) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_bools)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_bools = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_bools, submessage_arena);
    }
    set_has_uniform_bools();
    value_.uniform_bools_ = uniform_bools;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_bools)
}
void Uniform::clear_uniform_bools() {
  if (_internal_has_uniform_bools()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_bools_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_floats(::frame::proto::UniformFloats* uniform_floats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_floats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_floats)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_floats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_floats, submessage_arena);
    }
    set_has_uniform_floats();
    value_.uniform_floats_ = uniform_floats;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_floats)
}
void Uniform::clear_uniform_floats() {
  if (_internal_has_uniform_floats()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_floats_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* uniform_vec2s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_vec2s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_vec2s)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_vec2s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_vec2s, submessage_arena);
    }
    set_has_uniform_vec2s();
    value_.uniform_vec2s_ = uniform_vec2s;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_vec2s)
}
void Uniform::clear_uniform_vec2s() {
  if (_internal_has_uniform_vec2s()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_vec2s_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* uniform_vec3s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_vec3s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_vec3s)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_vec3s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_vec3s, submessage_arena);
    }
    set_has_uniform_vec3s();
    value_.uniform_vec3s_ = uniform_vec3s;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_vec3s)
}
void Uniform::clear_uniform_vec3s() {
  if (_internal_has_uniform_vec3s()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_vec3s_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* uniform_vec4s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_vec4s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_vec4s)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_vec4s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_vec4s, submessage_arena);
    }
    set_has_uniform_vec4s();
    value_.uniform_vec4s_ = uniform_vec4s;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_vec4s)
}
void Uniform::clear_uniform_vec4s() {
  if (_internal_has_uniform_vec4s()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_vec4s_;
    }
    clear_has_value();
  }
}
void Uniform::set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* uniform_mat4s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (uniform_mat4s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_mat4s)->GetArena();
    if (message_arena != submessage_arena) {
      uniform_mat4s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_mat4s, submessage_arena);
    }
    set_has_uniform_mat4s();
    value_.uniform_mat4s_ = uniform_mat4s;
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.uniform_mat4s)
}
void Uniform::clear_uniform_mat4s() {
  if (_internal_has_uniform_mat4s()) {
    if (GetArena() == nullptr) {
      delete value_.uniform_mat4s_;
    }
    clear_has_value();
  }
}
Uniform::Uniform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frame.proto.Uniform)
}
Uniform::Uniform(const Uniform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kUniformInt: {
      _internal_set_uniform_int(from._internal_uniform_int());
      break;
    }
    case kUniformBool: {
      _internal_set_uniform_bool(from._internal_uniform_bool());
      break;
    }
    case kUniformFloat: {
      _internal_set_uniform_float(from._internal_uniform_float());
      break;
    }
    case kUniformEnum: {
      _internal_set_uniform_enum(from._internal_uniform_enum());
      break;
    }
    case kUniformVec2: {
      _internal_mutable_uniform_vec2()->::frame::proto::UniformVector2::MergeFrom(from._internal_uniform_vec2());
      break;
    }
    case kUniformVec3: {
      _internal_mutable_uniform_vec3()->::frame::proto::UniformVector3::MergeFrom(from._internal_uniform_vec3());
      break;
    }
    case kUniformVec4: {
      _internal_mutable_uniform_vec4()->::frame::proto::UniformVector4::MergeFrom(from._internal_uniform_vec4());
      break;
    }
    case kUniformMat4: {
      _internal_mutable_uniform_mat4()->::frame::proto::UniformMatrix4::MergeFrom(from._internal_uniform_mat4());
      break;
    }
    case kUniformInts: {
      _internal_mutable_uniform_ints()->::frame::proto::UniformInts::MergeFrom(from._internal_uniform_ints());
      break;
    }
    case kUniformBools: {
      _internal_mutable_uniform_bools()->::frame::proto::UniformBools::MergeFrom(from._internal_uniform_bools());
      break;
    }
    case kUniformFloats: {
      _internal_mutable_uniform_floats()->::frame::proto::UniformFloats::MergeFrom(from._internal_uniform_floats());
      break;
    }
    case kUniformVec2S: {
      _internal_mutable_uniform_vec2s()->::frame::proto::UniformVector2s::MergeFrom(from._internal_uniform_vec2s());
      break;
    }
    case kUniformVec3S: {
      _internal_mutable_uniform_vec3s()->::frame::proto::UniformVector3s::MergeFrom(from._internal_uniform_vec3s());
      break;
    }
    case kUniformVec4S: {
      _internal_mutable_uniform_vec4s()->::frame::proto::UniformVector4s::MergeFrom(from._internal_uniform_vec4s());
      break;
    }
    case kUniformMat4S: {
      _internal_mutable_uniform_mat4s()->::frame::proto::UniformMatrix4s::MergeFrom(from._internal_uniform_mat4s());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:frame.proto.Uniform)
}

void Uniform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Uniform_Uniform_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

Uniform::~Uniform() {
  // @@protoc_insertion_point(destructor:frame.proto.Uniform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Uniform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Uniform::ArenaDtor(void* object) {
  Uniform* _this = reinterpret_cast< Uniform* >(object);
  (void)_this;
}
void Uniform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uniform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uniform& Uniform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uniform_Uniform_2eproto.base);
  return *internal_default_instance();
}


void Uniform::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:frame.proto.Uniform)
  switch (value_case()) {
    case kUniformInt: {
      // No need to clear
      break;
    }
    case kUniformBool: {
      // No need to clear
      break;
    }
    case kUniformFloat: {
      // No need to clear
      break;
    }
    case kUniformEnum: {
      // No need to clear
      break;
    }
    case kUniformVec2: {
      if (GetArena() == nullptr) {
        delete value_.uniform_vec2_;
      }
      break;
    }
    case kUniformVec3: {
      if (GetArena() == nullptr) {
        delete value_.uniform_vec3_;
      }
      break;
    }
    case kUniformVec4: {
      if (GetArena() == nullptr) {
        delete value_.uniform_vec4_;
      }
      break;
    }
    case kUniformMat4: {
      if (GetArena() == nullptr) {
        delete value_.uniform_mat4_;
      }
      break;
    }
    case kUniformInts: {
      if (GetArena() == nullptr) {
        delete value_.uniform_ints_;
      }
      break;
    }
    case kUniformBools: {
      if (GetArena() == nullptr) {
        delete value_.uniform_bools_;
      }
      break;
    }
    case kUniformFloats: {
      if (GetArena() == nullptr) {
        delete value_.uniform_floats_;
      }
      break;
    }
    case kUniformVec2S: {
      if (GetArena() == nullptr) {
        delete value_.uniform_vec2s_;
      }
      break;
    }
    case kUniformVec3S: {
      if (GetArena() == nullptr) {
        delete value_.uniform_vec3s_;
      }
      break;
    }
    case kUniformVec4S: {
      if (GetArena() == nullptr) {
        delete value_.uniform_vec4s_;
      }
      break;
    }
    case kUniformMat4S: {
      if (GetArena() == nullptr) {
        delete value_.uniform_mat4s_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Uniform::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.proto.Uniform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uniform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.proto.Uniform.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uniform_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_uniform_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool uniform_bool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_uniform_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float uniform_float = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _internal_set_uniform_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .frame.proto.Uniform.UniformEnum uniform_enum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_uniform_enum(static_cast<::frame::proto::Uniform_UniformEnum>(val));
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformVector2 uniform_vec2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_vec2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformVector3 uniform_vec3 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_vec3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformVector4 uniform_vec4 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_vec4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformMatrix4 uniform_mat4 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_mat4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformInts uniform_ints = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_ints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformBools uniform_bools = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_bools(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformFloats uniform_floats = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_floats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformVector2s uniform_vec2s = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_vec2s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformVector3s uniform_vec3s = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_vec3s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformVector4s uniform_vec4s = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_vec4s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.UniformMatrix4s uniform_mat4s = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_mat4s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uniform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.proto.Uniform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.proto.Uniform.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 uniform_int = 2;
  if (_internal_has_uniform_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uniform_int(), target);
  }

  // bool uniform_bool = 3;
  if (_internal_has_uniform_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_uniform_bool(), target);
  }

  // float uniform_float = 4;
  if (_internal_has_uniform_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_uniform_float(), target);
  }

  // .frame.proto.Uniform.UniformEnum uniform_enum = 10;
  if (_internal_has_uniform_enum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_uniform_enum(), target);
  }

  // .frame.proto.UniformVector2 uniform_vec2 = 20;
  if (_internal_has_uniform_vec2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::uniform_vec2(this), target, stream);
  }

  // .frame.proto.UniformVector3 uniform_vec3 = 21;
  if (_internal_has_uniform_vec3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::uniform_vec3(this), target, stream);
  }

  // .frame.proto.UniformVector4 uniform_vec4 = 22;
  if (_internal_has_uniform_vec4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::uniform_vec4(this), target, stream);
  }

  // .frame.proto.UniformMatrix4 uniform_mat4 = 31;
  if (_internal_has_uniform_mat4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::uniform_mat4(this), target, stream);
  }

  // .frame.proto.UniformInts uniform_ints = 40;
  if (_internal_has_uniform_ints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::uniform_ints(this), target, stream);
  }

  // .frame.proto.UniformBools uniform_bools = 41;
  if (_internal_has_uniform_bools()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::uniform_bools(this), target, stream);
  }

  // .frame.proto.UniformFloats uniform_floats = 42;
  if (_internal_has_uniform_floats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::uniform_floats(this), target, stream);
  }

  // .frame.proto.UniformVector2s uniform_vec2s = 50;
  if (_internal_has_uniform_vec2s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::uniform_vec2s(this), target, stream);
  }

  // .frame.proto.UniformVector3s uniform_vec3s = 51;
  if (_internal_has_uniform_vec3s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::uniform_vec3s(this), target, stream);
  }

  // .frame.proto.UniformVector4s uniform_vec4s = 52;
  if (_internal_has_uniform_vec4s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::uniform_vec4s(this), target, stream);
  }

  // .frame.proto.UniformMatrix4s uniform_mat4s = 54;
  if (_internal_has_uniform_mat4s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::uniform_mat4s(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.proto.Uniform)
  return target;
}

size_t Uniform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.proto.Uniform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (value_case()) {
    // int32 uniform_int = 2;
    case kUniformInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_uniform_int());
      break;
    }
    // bool uniform_bool = 3;
    case kUniformBool: {
      total_size += 1 + 1;
      break;
    }
    // float uniform_float = 4;
    case kUniformFloat: {
      total_size += 1 + 4;
      break;
    }
    // .frame.proto.Uniform.UniformEnum uniform_enum = 10;
    case kUniformEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_uniform_enum());
      break;
    }
    // .frame.proto.UniformVector2 uniform_vec2 = 20;
    case kUniformVec2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_vec2_);
      break;
    }
    // .frame.proto.UniformVector3 uniform_vec3 = 21;
    case kUniformVec3: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_vec3_);
      break;
    }
    // .frame.proto.UniformVector4 uniform_vec4 = 22;
    case kUniformVec4: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_vec4_);
      break;
    }
    // .frame.proto.UniformMatrix4 uniform_mat4 = 31;
    case kUniformMat4: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_mat4_);
      break;
    }
    // .frame.proto.UniformInts uniform_ints = 40;
    case kUniformInts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_ints_);
      break;
    }
    // .frame.proto.UniformBools uniform_bools = 41;
    case kUniformBools: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_bools_);
      break;
    }
    // .frame.proto.UniformFloats uniform_floats = 42;
    case kUniformFloats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_floats_);
      break;
    }
    // .frame.proto.UniformVector2s uniform_vec2s = 50;
    case kUniformVec2S: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_vec2s_);
      break;
    }
    // .frame.proto.UniformVector3s uniform_vec3s = 51;
    case kUniformVec3S: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_vec3s_);
      break;
    }
    // .frame.proto.UniformVector4s uniform_vec4s = 52;
    case kUniformVec4S: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_vec4s_);
      break;
    }
    // .frame.proto.UniformMatrix4s uniform_mat4s = 54;
    case kUniformMat4S: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uniform_mat4s_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uniform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.proto.Uniform)
  GOOGLE_DCHECK_NE(&from, this);
  const Uniform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uniform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.proto.Uniform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.proto.Uniform)
    MergeFrom(*source);
  }
}

void Uniform::MergeFrom(const Uniform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.proto.Uniform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  switch (from.value_case()) {
    case kUniformInt: {
      _internal_set_uniform_int(from._internal_uniform_int());
      break;
    }
    case kUniformBool: {
      _internal_set_uniform_bool(from._internal_uniform_bool());
      break;
    }
    case kUniformFloat: {
      _internal_set_uniform_float(from._internal_uniform_float());
      break;
    }
    case kUniformEnum: {
      _internal_set_uniform_enum(from._internal_uniform_enum());
      break;
    }
    case kUniformVec2: {
      _internal_mutable_uniform_vec2()->::frame::proto::UniformVector2::MergeFrom(from._internal_uniform_vec2());
      break;
    }
    case kUniformVec3: {
      _internal_mutable_uniform_vec3()->::frame::proto::UniformVector3::MergeFrom(from._internal_uniform_vec3());
      break;
    }
    case kUniformVec4: {
      _internal_mutable_uniform_vec4()->::frame::proto::UniformVector4::MergeFrom(from._internal_uniform_vec4());
      break;
    }
    case kUniformMat4: {
      _internal_mutable_uniform_mat4()->::frame::proto::UniformMatrix4::MergeFrom(from._internal_uniform_mat4());
      break;
    }
    case kUniformInts: {
      _internal_mutable_uniform_ints()->::frame::proto::UniformInts::MergeFrom(from._internal_uniform_ints());
      break;
    }
    case kUniformBools: {
      _internal_mutable_uniform_bools()->::frame::proto::UniformBools::MergeFrom(from._internal_uniform_bools());
      break;
    }
    case kUniformFloats: {
      _internal_mutable_uniform_floats()->::frame::proto::UniformFloats::MergeFrom(from._internal_uniform_floats());
      break;
    }
    case kUniformVec2S: {
      _internal_mutable_uniform_vec2s()->::frame::proto::UniformVector2s::MergeFrom(from._internal_uniform_vec2s());
      break;
    }
    case kUniformVec3S: {
      _internal_mutable_uniform_vec3s()->::frame::proto::UniformVector3s::MergeFrom(from._internal_uniform_vec3s());
      break;
    }
    case kUniformVec4S: {
      _internal_mutable_uniform_vec4s()->::frame::proto::UniformVector4s::MergeFrom(from._internal_uniform_vec4s());
      break;
    }
    case kUniformMat4S: {
      _internal_mutable_uniform_mat4s()->::frame::proto::UniformMatrix4s::MergeFrom(from._internal_uniform_mat4s());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Uniform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.proto.Uniform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uniform::CopyFrom(const Uniform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.proto.Uniform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uniform::IsInitialized() const {
  return true;
}

void Uniform::InternalSwap(Uniform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uniform::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frame::proto::Uniform* Arena::CreateMaybeMessage< ::frame::proto::Uniform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frame::proto::Uniform >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
