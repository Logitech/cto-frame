// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Display.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Display_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Display_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Texture.pb.h"
#include "Effect.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Display_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Display_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Display_2eproto;
namespace frame {
namespace proto {
class Deferred;
class DeferredDefaultTypeInternal;
extern DeferredDefaultTypeInternal _Deferred_default_instance_;
class Display;
class DisplayDefaultTypeInternal;
extern DisplayDefaultTypeInternal _Display_default_instance_;
class View;
class ViewDefaultTypeInternal;
extern ViewDefaultTypeInternal _View_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Deferred* Arena::CreateMaybeMessage<::frame::proto::Deferred>(Arena*);
template<> ::frame::proto::Display* Arena::CreateMaybeMessage<::frame::proto::Display>(Arena*);
template<> ::frame::proto::View* Arena::CreateMaybeMessage<::frame::proto::View>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

// ===================================================================

class Deferred PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Deferred) */ {
 public:
  inline Deferred() : Deferred(nullptr) {}
  virtual ~Deferred();

  Deferred(const Deferred& from);
  Deferred(Deferred&& from) noexcept
    : Deferred() {
    *this = ::std::move(from);
  }

  inline Deferred& operator=(const Deferred& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deferred& operator=(Deferred&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Deferred& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deferred* internal_default_instance() {
    return reinterpret_cast<const Deferred*>(
               &_Deferred_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Deferred& a, Deferred& b) {
    a.Swap(&b);
  }
  inline void Swap(Deferred* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deferred* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deferred* New() const final {
    return CreateMaybeMessage<Deferred>(nullptr);
  }

  Deferred* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deferred>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Deferred& from);
  void MergeFrom(const Deferred& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deferred* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Deferred";
  }
  protected:
  explicit Deferred(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Display_2eproto);
    return ::descriptor_table_Display_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutAlbedoFieldNumber = 1,
    kOutNormalFieldNumber = 2,
    kOutMraFieldNumber = 3,
    kOutPositionFieldNumber = 4,
  };
  // string out_albedo = 1;
  void clear_out_albedo();
  const std::string& out_albedo() const;
  void set_out_albedo(const std::string& value);
  void set_out_albedo(std::string&& value);
  void set_out_albedo(const char* value);
  void set_out_albedo(const char* value, size_t size);
  std::string* mutable_out_albedo();
  std::string* release_out_albedo();
  void set_allocated_out_albedo(std::string* out_albedo);
  private:
  const std::string& _internal_out_albedo() const;
  void _internal_set_out_albedo(const std::string& value);
  std::string* _internal_mutable_out_albedo();
  public:

  // string out_normal = 2;
  void clear_out_normal();
  const std::string& out_normal() const;
  void set_out_normal(const std::string& value);
  void set_out_normal(std::string&& value);
  void set_out_normal(const char* value);
  void set_out_normal(const char* value, size_t size);
  std::string* mutable_out_normal();
  std::string* release_out_normal();
  void set_allocated_out_normal(std::string* out_normal);
  private:
  const std::string& _internal_out_normal() const;
  void _internal_set_out_normal(const std::string& value);
  std::string* _internal_mutable_out_normal();
  public:

  // string out_mra = 3;
  void clear_out_mra();
  const std::string& out_mra() const;
  void set_out_mra(const std::string& value);
  void set_out_mra(std::string&& value);
  void set_out_mra(const char* value);
  void set_out_mra(const char* value, size_t size);
  std::string* mutable_out_mra();
  std::string* release_out_mra();
  void set_allocated_out_mra(std::string* out_mra);
  private:
  const std::string& _internal_out_mra() const;
  void _internal_set_out_mra(const std::string& value);
  std::string* _internal_mutable_out_mra();
  public:

  // string out_position = 4;
  void clear_out_position();
  const std::string& out_position() const;
  void set_out_position(const std::string& value);
  void set_out_position(std::string&& value);
  void set_out_position(const char* value);
  void set_out_position(const char* value, size_t size);
  std::string* mutable_out_position();
  std::string* release_out_position();
  void set_allocated_out_position(std::string* out_position);
  private:
  const std::string& _internal_out_position() const;
  void _internal_set_out_position(const std::string& value);
  std::string* _internal_mutable_out_position();
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.Deferred)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_albedo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_normal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_mra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Display_2eproto;
};
// -------------------------------------------------------------------

class View PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.View) */ {
 public:
  inline View() : View(nullptr) {}
  virtual ~View();

  View(const View& from);
  View(View&& from) noexcept
    : View() {
    *this = ::std::move(from);
  }

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }
  inline View& operator=(View&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const View& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const View* internal_default_instance() {
    return reinterpret_cast<const View*>(
               &_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(View& a, View& b) {
    a.Swap(&b);
  }
  inline void Swap(View* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(View* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline View* New() const final {
    return CreateMaybeMessage<View>(nullptr);
  }

  View* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<View>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(View* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.View";
  }
  protected:
  explicit View(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Display_2eproto);
    return ::descriptor_table_Display_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutNormalFieldNumber = 1,
    kOutPositionFieldNumber = 2,
  };
  // string out_normal = 1;
  void clear_out_normal();
  const std::string& out_normal() const;
  void set_out_normal(const std::string& value);
  void set_out_normal(std::string&& value);
  void set_out_normal(const char* value);
  void set_out_normal(const char* value, size_t size);
  std::string* mutable_out_normal();
  std::string* release_out_normal();
  void set_allocated_out_normal(std::string* out_normal);
  private:
  const std::string& _internal_out_normal() const;
  void _internal_set_out_normal(const std::string& value);
  std::string* _internal_mutable_out_normal();
  public:

  // string out_position = 2;
  void clear_out_position();
  const std::string& out_position() const;
  void set_out_position(const std::string& value);
  void set_out_position(std::string&& value);
  void set_out_position(const char* value);
  void set_out_position(const char* value, size_t size);
  std::string* mutable_out_position();
  std::string* release_out_position();
  void set_allocated_out_position(std::string* out_position);
  private:
  const std::string& _internal_out_position() const;
  void _internal_set_out_position(const std::string& value);
  std::string* _internal_mutable_out_position();
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.View)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_normal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Display_2eproto;
};
// -------------------------------------------------------------------

class Display PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Display) */ {
 public:
  inline Display() : Display(nullptr) {}
  virtual ~Display();

  Display(const Display& from);
  Display(Display&& from) noexcept
    : Display() {
    *this = ::std::move(from);
  }

  inline Display& operator=(const Display& from) {
    CopyFrom(from);
    return *this;
  }
  inline Display& operator=(Display&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Display& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Display* internal_default_instance() {
    return reinterpret_cast<const Display*>(
               &_Display_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Display& a, Display& b) {
    a.Swap(&b);
  }
  inline void Swap(Display* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Display* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Display* New() const final {
    return CreateMaybeMessage<Display>(nullptr);
  }

  Display* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Display>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Display& from);
  void MergeFrom(const Display& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Display* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Display";
  }
  protected:
  explicit Display(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Display_2eproto);
    return ::descriptor_table_Display_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutTexturesFieldNumber = 10,
    kTexturesFieldNumber = 20,
    kEffectsFieldNumber = 21,
    kDeferedFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // repeated string out_textures = 10;
  int out_textures_size() const;
  private:
  int _internal_out_textures_size() const;
  public:
  void clear_out_textures();
  const std::string& out_textures(int index) const;
  std::string* mutable_out_textures(int index);
  void set_out_textures(int index, const std::string& value);
  void set_out_textures(int index, std::string&& value);
  void set_out_textures(int index, const char* value);
  void set_out_textures(int index, const char* value, size_t size);
  std::string* add_out_textures();
  void add_out_textures(const std::string& value);
  void add_out_textures(std::string&& value);
  void add_out_textures(const char* value);
  void add_out_textures(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& out_textures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_out_textures();
  private:
  const std::string& _internal_out_textures(int index) const;
  std::string* _internal_add_out_textures();
  public:

  // repeated .frame.proto.Texture textures = 20;
  int textures_size() const;
  private:
  int _internal_textures_size() const;
  public:
  void clear_textures();
  ::frame::proto::Texture* mutable_textures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >*
      mutable_textures();
  private:
  const ::frame::proto::Texture& _internal_textures(int index) const;
  ::frame::proto::Texture* _internal_add_textures();
  public:
  const ::frame::proto::Texture& textures(int index) const;
  ::frame::proto::Texture* add_textures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >&
      textures() const;

  // repeated .frame.proto.Effect effects = 21;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  ::frame::proto::Effect* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Effect >*
      mutable_effects();
  private:
  const ::frame::proto::Effect& _internal_effects(int index) const;
  ::frame::proto::Effect* _internal_add_effects();
  public:
  const ::frame::proto::Effect& effects(int index) const;
  ::frame::proto::Effect* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Effect >&
      effects() const;

  // .frame.proto.Deferred defered = 1;
  bool has_defered() const;
  private:
  bool _internal_has_defered() const;
  public:
  void clear_defered();
  const ::frame::proto::Deferred& defered() const;
  ::frame::proto::Deferred* release_defered();
  ::frame::proto::Deferred* mutable_defered();
  void set_allocated_defered(::frame::proto::Deferred* defered);
  private:
  const ::frame::proto::Deferred& _internal_defered() const;
  ::frame::proto::Deferred* _internal_mutable_defered();
  public:
  void unsafe_arena_set_allocated_defered(
      ::frame::proto::Deferred* defered);
  ::frame::proto::Deferred* unsafe_arena_release_defered();

  // .frame.proto.View view = 2;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  const ::frame::proto::View& view() const;
  ::frame::proto::View* release_view();
  ::frame::proto::View* mutable_view();
  void set_allocated_view(::frame::proto::View* view);
  private:
  const ::frame::proto::View& _internal_view() const;
  ::frame::proto::View* _internal_mutable_view();
  public:
  void unsafe_arena_set_allocated_view(
      ::frame::proto::View* view);
  ::frame::proto::View* unsafe_arena_release_view();

  // @@protoc_insertion_point(class_scope:frame.proto.Display)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> out_textures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture > textures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Effect > effects_;
  ::frame::proto::Deferred* defered_;
  ::frame::proto::View* view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Display_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Deferred

// string out_albedo = 1;
inline void Deferred::clear_out_albedo() {
  out_albedo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deferred::out_albedo() const {
  // @@protoc_insertion_point(field_get:frame.proto.Deferred.out_albedo)
  return _internal_out_albedo();
}
inline void Deferred::set_out_albedo(const std::string& value) {
  _internal_set_out_albedo(value);
  // @@protoc_insertion_point(field_set:frame.proto.Deferred.out_albedo)
}
inline std::string* Deferred::mutable_out_albedo() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Deferred.out_albedo)
  return _internal_mutable_out_albedo();
}
inline const std::string& Deferred::_internal_out_albedo() const {
  return out_albedo_.Get();
}
inline void Deferred::_internal_set_out_albedo(const std::string& value) {
  
  out_albedo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deferred::set_out_albedo(std::string&& value) {
  
  out_albedo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Deferred.out_albedo)
}
inline void Deferred::set_out_albedo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_albedo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Deferred.out_albedo)
}
inline void Deferred::set_out_albedo(const char* value,
    size_t size) {
  
  out_albedo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Deferred.out_albedo)
}
inline std::string* Deferred::_internal_mutable_out_albedo() {
  
  return out_albedo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deferred::release_out_albedo() {
  // @@protoc_insertion_point(field_release:frame.proto.Deferred.out_albedo)
  return out_albedo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deferred::set_allocated_out_albedo(std::string* out_albedo) {
  if (out_albedo != nullptr) {
    
  } else {
    
  }
  out_albedo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_albedo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Deferred.out_albedo)
}

// string out_normal = 2;
inline void Deferred::clear_out_normal() {
  out_normal_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deferred::out_normal() const {
  // @@protoc_insertion_point(field_get:frame.proto.Deferred.out_normal)
  return _internal_out_normal();
}
inline void Deferred::set_out_normal(const std::string& value) {
  _internal_set_out_normal(value);
  // @@protoc_insertion_point(field_set:frame.proto.Deferred.out_normal)
}
inline std::string* Deferred::mutable_out_normal() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Deferred.out_normal)
  return _internal_mutable_out_normal();
}
inline const std::string& Deferred::_internal_out_normal() const {
  return out_normal_.Get();
}
inline void Deferred::_internal_set_out_normal(const std::string& value) {
  
  out_normal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deferred::set_out_normal(std::string&& value) {
  
  out_normal_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Deferred.out_normal)
}
inline void Deferred::set_out_normal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_normal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Deferred.out_normal)
}
inline void Deferred::set_out_normal(const char* value,
    size_t size) {
  
  out_normal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Deferred.out_normal)
}
inline std::string* Deferred::_internal_mutable_out_normal() {
  
  return out_normal_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deferred::release_out_normal() {
  // @@protoc_insertion_point(field_release:frame.proto.Deferred.out_normal)
  return out_normal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deferred::set_allocated_out_normal(std::string* out_normal) {
  if (out_normal != nullptr) {
    
  } else {
    
  }
  out_normal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_normal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Deferred.out_normal)
}

// string out_mra = 3;
inline void Deferred::clear_out_mra() {
  out_mra_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deferred::out_mra() const {
  // @@protoc_insertion_point(field_get:frame.proto.Deferred.out_mra)
  return _internal_out_mra();
}
inline void Deferred::set_out_mra(const std::string& value) {
  _internal_set_out_mra(value);
  // @@protoc_insertion_point(field_set:frame.proto.Deferred.out_mra)
}
inline std::string* Deferred::mutable_out_mra() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Deferred.out_mra)
  return _internal_mutable_out_mra();
}
inline const std::string& Deferred::_internal_out_mra() const {
  return out_mra_.Get();
}
inline void Deferred::_internal_set_out_mra(const std::string& value) {
  
  out_mra_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deferred::set_out_mra(std::string&& value) {
  
  out_mra_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Deferred.out_mra)
}
inline void Deferred::set_out_mra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_mra_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Deferred.out_mra)
}
inline void Deferred::set_out_mra(const char* value,
    size_t size) {
  
  out_mra_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Deferred.out_mra)
}
inline std::string* Deferred::_internal_mutable_out_mra() {
  
  return out_mra_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deferred::release_out_mra() {
  // @@protoc_insertion_point(field_release:frame.proto.Deferred.out_mra)
  return out_mra_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deferred::set_allocated_out_mra(std::string* out_mra) {
  if (out_mra != nullptr) {
    
  } else {
    
  }
  out_mra_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_mra,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Deferred.out_mra)
}

// string out_position = 4;
inline void Deferred::clear_out_position() {
  out_position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deferred::out_position() const {
  // @@protoc_insertion_point(field_get:frame.proto.Deferred.out_position)
  return _internal_out_position();
}
inline void Deferred::set_out_position(const std::string& value) {
  _internal_set_out_position(value);
  // @@protoc_insertion_point(field_set:frame.proto.Deferred.out_position)
}
inline std::string* Deferred::mutable_out_position() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Deferred.out_position)
  return _internal_mutable_out_position();
}
inline const std::string& Deferred::_internal_out_position() const {
  return out_position_.Get();
}
inline void Deferred::_internal_set_out_position(const std::string& value) {
  
  out_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deferred::set_out_position(std::string&& value) {
  
  out_position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.Deferred.out_position)
}
inline void Deferred::set_out_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.Deferred.out_position)
}
inline void Deferred::set_out_position(const char* value,
    size_t size) {
  
  out_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Deferred.out_position)
}
inline std::string* Deferred::_internal_mutable_out_position() {
  
  return out_position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deferred::release_out_position() {
  // @@protoc_insertion_point(field_release:frame.proto.Deferred.out_position)
  return out_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deferred::set_allocated_out_position(std::string* out_position) {
  if (out_position != nullptr) {
    
  } else {
    
  }
  out_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Deferred.out_position)
}

// -------------------------------------------------------------------

// View

// string out_normal = 1;
inline void View::clear_out_normal() {
  out_normal_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& View::out_normal() const {
  // @@protoc_insertion_point(field_get:frame.proto.View.out_normal)
  return _internal_out_normal();
}
inline void View::set_out_normal(const std::string& value) {
  _internal_set_out_normal(value);
  // @@protoc_insertion_point(field_set:frame.proto.View.out_normal)
}
inline std::string* View::mutable_out_normal() {
  // @@protoc_insertion_point(field_mutable:frame.proto.View.out_normal)
  return _internal_mutable_out_normal();
}
inline const std::string& View::_internal_out_normal() const {
  return out_normal_.Get();
}
inline void View::_internal_set_out_normal(const std::string& value) {
  
  out_normal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void View::set_out_normal(std::string&& value) {
  
  out_normal_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.View.out_normal)
}
inline void View::set_out_normal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_normal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.View.out_normal)
}
inline void View::set_out_normal(const char* value,
    size_t size) {
  
  out_normal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.View.out_normal)
}
inline std::string* View::_internal_mutable_out_normal() {
  
  return out_normal_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* View::release_out_normal() {
  // @@protoc_insertion_point(field_release:frame.proto.View.out_normal)
  return out_normal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_out_normal(std::string* out_normal) {
  if (out_normal != nullptr) {
    
  } else {
    
  }
  out_normal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_normal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.View.out_normal)
}

// string out_position = 2;
inline void View::clear_out_position() {
  out_position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& View::out_position() const {
  // @@protoc_insertion_point(field_get:frame.proto.View.out_position)
  return _internal_out_position();
}
inline void View::set_out_position(const std::string& value) {
  _internal_set_out_position(value);
  // @@protoc_insertion_point(field_set:frame.proto.View.out_position)
}
inline std::string* View::mutable_out_position() {
  // @@protoc_insertion_point(field_mutable:frame.proto.View.out_position)
  return _internal_mutable_out_position();
}
inline const std::string& View::_internal_out_position() const {
  return out_position_.Get();
}
inline void View::_internal_set_out_position(const std::string& value) {
  
  out_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void View::set_out_position(std::string&& value) {
  
  out_position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frame.proto.View.out_position)
}
inline void View::set_out_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:frame.proto.View.out_position)
}
inline void View::set_out_position(const char* value,
    size_t size) {
  
  out_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frame.proto.View.out_position)
}
inline std::string* View::_internal_mutable_out_position() {
  
  return out_position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* View::release_out_position() {
  // @@protoc_insertion_point(field_release:frame.proto.View.out_position)
  return out_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_out_position(std::string* out_position) {
  if (out_position != nullptr) {
    
  } else {
    
  }
  out_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frame.proto.View.out_position)
}

// -------------------------------------------------------------------

// Display

// .frame.proto.Deferred defered = 1;
inline bool Display::_internal_has_defered() const {
  return this != internal_default_instance() && defered_ != nullptr;
}
inline bool Display::has_defered() const {
  return _internal_has_defered();
}
inline void Display::clear_defered() {
  if (GetArena() == nullptr && defered_ != nullptr) {
    delete defered_;
  }
  defered_ = nullptr;
}
inline const ::frame::proto::Deferred& Display::_internal_defered() const {
  const ::frame::proto::Deferred* p = defered_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::proto::Deferred*>(
      &::frame::proto::_Deferred_default_instance_);
}
inline const ::frame::proto::Deferred& Display::defered() const {
  // @@protoc_insertion_point(field_get:frame.proto.Display.defered)
  return _internal_defered();
}
inline void Display::unsafe_arena_set_allocated_defered(
    ::frame::proto::Deferred* defered) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defered_);
  }
  defered_ = defered;
  if (defered) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Display.defered)
}
inline ::frame::proto::Deferred* Display::release_defered() {
  
  ::frame::proto::Deferred* temp = defered_;
  defered_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::frame::proto::Deferred* Display::unsafe_arena_release_defered() {
  // @@protoc_insertion_point(field_release:frame.proto.Display.defered)
  
  ::frame::proto::Deferred* temp = defered_;
  defered_ = nullptr;
  return temp;
}
inline ::frame::proto::Deferred* Display::_internal_mutable_defered() {
  
  if (defered_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::Deferred>(GetArena());
    defered_ = p;
  }
  return defered_;
}
inline ::frame::proto::Deferred* Display::mutable_defered() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Display.defered)
  return _internal_mutable_defered();
}
inline void Display::set_allocated_defered(::frame::proto::Deferred* defered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete defered_;
  }
  if (defered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defered);
    if (message_arena != submessage_arena) {
      defered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defered, submessage_arena);
    }
    
  } else {
    
  }
  defered_ = defered;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Display.defered)
}

// .frame.proto.View view = 2;
inline bool Display::_internal_has_view() const {
  return this != internal_default_instance() && view_ != nullptr;
}
inline bool Display::has_view() const {
  return _internal_has_view();
}
inline void Display::clear_view() {
  if (GetArena() == nullptr && view_ != nullptr) {
    delete view_;
  }
  view_ = nullptr;
}
inline const ::frame::proto::View& Display::_internal_view() const {
  const ::frame::proto::View* p = view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::proto::View*>(
      &::frame::proto::_View_default_instance_);
}
inline const ::frame::proto::View& Display::view() const {
  // @@protoc_insertion_point(field_get:frame.proto.Display.view)
  return _internal_view();
}
inline void Display::unsafe_arena_set_allocated_view(
    ::frame::proto::View* view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_);
  }
  view_ = view;
  if (view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Display.view)
}
inline ::frame::proto::View* Display::release_view() {
  
  ::frame::proto::View* temp = view_;
  view_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::frame::proto::View* Display::unsafe_arena_release_view() {
  // @@protoc_insertion_point(field_release:frame.proto.Display.view)
  
  ::frame::proto::View* temp = view_;
  view_ = nullptr;
  return temp;
}
inline ::frame::proto::View* Display::_internal_mutable_view() {
  
  if (view_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::View>(GetArena());
    view_ = p;
  }
  return view_;
}
inline ::frame::proto::View* Display::mutable_view() {
  // @@protoc_insertion_point(field_mutable:frame.proto.Display.view)
  return _internal_mutable_view();
}
inline void Display::set_allocated_view(::frame::proto::View* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete view_;
  }
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(view);
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    
  } else {
    
  }
  view_ = view;
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Display.view)
}

// repeated string out_textures = 10;
inline int Display::_internal_out_textures_size() const {
  return out_textures_.size();
}
inline int Display::out_textures_size() const {
  return _internal_out_textures_size();
}
inline void Display::clear_out_textures() {
  out_textures_.Clear();
}
inline std::string* Display::add_out_textures() {
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Display.out_textures)
  return _internal_add_out_textures();
}
inline const std::string& Display::_internal_out_textures(int index) const {
  return out_textures_.Get(index);
}
inline const std::string& Display::out_textures(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Display.out_textures)
  return _internal_out_textures(index);
}
inline std::string* Display::mutable_out_textures(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Display.out_textures)
  return out_textures_.Mutable(index);
}
inline void Display::set_out_textures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:frame.proto.Display.out_textures)
  out_textures_.Mutable(index)->assign(value);
}
inline void Display::set_out_textures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:frame.proto.Display.out_textures)
  out_textures_.Mutable(index)->assign(std::move(value));
}
inline void Display::set_out_textures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  out_textures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frame.proto.Display.out_textures)
}
inline void Display::set_out_textures(int index, const char* value, size_t size) {
  out_textures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Display.out_textures)
}
inline std::string* Display::_internal_add_out_textures() {
  return out_textures_.Add();
}
inline void Display::add_out_textures(const std::string& value) {
  out_textures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:frame.proto.Display.out_textures)
}
inline void Display::add_out_textures(std::string&& value) {
  out_textures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:frame.proto.Display.out_textures)
}
inline void Display::add_out_textures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  out_textures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frame.proto.Display.out_textures)
}
inline void Display::add_out_textures(const char* value, size_t size) {
  out_textures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frame.proto.Display.out_textures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Display::out_textures() const {
  // @@protoc_insertion_point(field_list:frame.proto.Display.out_textures)
  return out_textures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Display::mutable_out_textures() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Display.out_textures)
  return &out_textures_;
}

// repeated .frame.proto.Texture textures = 20;
inline int Display::_internal_textures_size() const {
  return textures_.size();
}
inline int Display::textures_size() const {
  return _internal_textures_size();
}
inline ::frame::proto::Texture* Display::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Display.textures)
  return textures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >*
Display::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Display.textures)
  return &textures_;
}
inline const ::frame::proto::Texture& Display::_internal_textures(int index) const {
  return textures_.Get(index);
}
inline const ::frame::proto::Texture& Display::textures(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Display.textures)
  return _internal_textures(index);
}
inline ::frame::proto::Texture* Display::_internal_add_textures() {
  return textures_.Add();
}
inline ::frame::proto::Texture* Display::add_textures() {
  // @@protoc_insertion_point(field_add:frame.proto.Display.textures)
  return _internal_add_textures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Texture >&
Display::textures() const {
  // @@protoc_insertion_point(field_list:frame.proto.Display.textures)
  return textures_;
}

// repeated .frame.proto.Effect effects = 21;
inline int Display::_internal_effects_size() const {
  return effects_.size();
}
inline int Display::effects_size() const {
  return _internal_effects_size();
}
inline ::frame::proto::Effect* Display::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:frame.proto.Display.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Effect >*
Display::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Display.effects)
  return &effects_;
}
inline const ::frame::proto::Effect& Display::_internal_effects(int index) const {
  return effects_.Get(index);
}
inline const ::frame::proto::Effect& Display::effects(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.Display.effects)
  return _internal_effects(index);
}
inline ::frame::proto::Effect* Display::_internal_add_effects() {
  return effects_.Add();
}
inline ::frame::proto::Effect* Display::add_effects() {
  // @@protoc_insertion_point(field_add:frame.proto.Display.effects)
  return _internal_add_effects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::proto::Effect >&
Display::effects() const {
  // @@protoc_insertion_point(field_list:frame.proto.Display.effects)
  return effects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Display_2eproto
