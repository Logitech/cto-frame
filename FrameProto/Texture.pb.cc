// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Texture.proto

#include "Texture.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Pixel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PixelElementSize_Pixel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pixel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PixelStructure_Pixel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Size_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Size_Size_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Texture_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureFilter_Texture_2eproto;
namespace frame {
namespace proto {
class TextureFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextureFilter> _instance;
} _TextureFilter_default_instance_;
class TextureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Texture> _instance;
} _Texture_default_instance_;
}  // namespace proto
}  // namespace frame
static void InitDefaultsscc_info_Texture_Texture_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::proto::_Texture_default_instance_;
    new (ptr) ::frame::proto::Texture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::proto::Texture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Texture_Texture_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Texture_Texture_2eproto}, {
      &scc_info_Size_Size_2eproto.base,
      &scc_info_PixelElementSize_Pixel_2eproto.base,
      &scc_info_PixelStructure_Pixel_2eproto.base,
      &scc_info_TextureFilter_Texture_2eproto.base,}};

static void InitDefaultsscc_info_TextureFilter_Texture_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::proto::_TextureFilter_default_instance_;
    new (ptr) ::frame::proto::TextureFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::proto::TextureFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureFilter_Texture_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextureFilter_Texture_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Texture_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Texture_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Texture_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Texture_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::proto::TextureFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::proto::TextureFilter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, name_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, size_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, clear_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, pixel_element_size_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, pixel_structure_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, min_filter_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, mag_filter_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, wrap_s_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, wrap_t_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, wrap_r_),
  PROTOBUF_FIELD_OFFSET(::frame::proto::Texture, pixels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frame::proto::TextureFilter)},
  { 6, -1, sizeof(::frame::proto::Texture)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::proto::_TextureFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::proto::_Texture_default_instance_),
};

const char descriptor_table_protodef_Texture_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rTexture.proto\022\013frame.proto\032\nSize.proto"
  "\032\013Pixel.proto\"\216\002\n\rTextureFilter\022.\n\005value"
  "\030\001 \001(\0162\037.frame.proto.TextureFilter.Enum\""
  "\314\001\n\004Enum\022\013\n\007INVALID\020\000\022\013\n\007NEAREST\020\001\022\n\n\006LI"
  "NEAR\020\002\022\032\n\026NEAREST_MIPMAP_NEAREST\020\003\022\031\n\025LI"
  "NEAR_MIPMAP_NEAREST\020\004\022\031\n\025NEAREST_MIPMAP_"
  "LINEAR\020\005\022\030\n\024LINEAR_MIPMAP_LINEAR\020\006\022\021\n\rCL"
  "AMP_TO_EDGE\020\007\022\023\n\017MIRRORED_REPEAT\020\010\022\n\n\006RE"
  "PEAT\020\t\"\254\003\n\007Texture\022\014\n\004name\030\001 \001(\t\022\037\n\004size"
  "\030\002 \001(\0132\021.frame.proto.Size\022\r\n\005clear\030\003 \001(\010"
  "\0229\n\022pixel_element_size\030\n \001(\0132\035.frame.pro"
  "to.PixelElementSize\0224\n\017pixel_structure\030\013"
  " \001(\0132\033.frame.proto.PixelStructure\022.\n\nmin"
  "_filter\030\025 \001(\0132\032.frame.proto.TextureFilte"
  "r\022.\n\nmag_filter\030\026 \001(\0132\032.frame.proto.Text"
  "ureFilter\022*\n\006wrap_s\030\027 \001(\0132\032.frame.proto."
  "TextureFilter\022*\n\006wrap_t\030\030 \001(\0132\032.frame.pr"
  "oto.TextureFilter\022*\n\006wrap_r\030\031 \001(\0132\032.fram"
  "e.proto.TextureFilter\022\016\n\006pixels\030\036 \001(\014b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Texture_2eproto_deps[2] = {
  &::descriptor_table_Pixel_2eproto,
  &::descriptor_table_Size_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Texture_2eproto_sccs[2] = {
  &scc_info_Texture_Texture_2eproto.base,
  &scc_info_TextureFilter_Texture_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Texture_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Texture_2eproto = {
  false, false, descriptor_table_protodef_Texture_2eproto, "Texture.proto", 765,
  &descriptor_table_Texture_2eproto_once, descriptor_table_Texture_2eproto_sccs, descriptor_table_Texture_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_Texture_2eproto::offsets,
  file_level_metadata_Texture_2eproto, 2, file_level_enum_descriptors_Texture_2eproto, file_level_service_descriptors_Texture_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Texture_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Texture_2eproto)), true);
namespace frame {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureFilter_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Texture_2eproto);
  return file_level_enum_descriptors_Texture_2eproto[0];
}
bool TextureFilter_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TextureFilter_Enum TextureFilter::INVALID;
constexpr TextureFilter_Enum TextureFilter::NEAREST;
constexpr TextureFilter_Enum TextureFilter::LINEAR;
constexpr TextureFilter_Enum TextureFilter::NEAREST_MIPMAP_NEAREST;
constexpr TextureFilter_Enum TextureFilter::LINEAR_MIPMAP_NEAREST;
constexpr TextureFilter_Enum TextureFilter::NEAREST_MIPMAP_LINEAR;
constexpr TextureFilter_Enum TextureFilter::LINEAR_MIPMAP_LINEAR;
constexpr TextureFilter_Enum TextureFilter::CLAMP_TO_EDGE;
constexpr TextureFilter_Enum TextureFilter::MIRRORED_REPEAT;
constexpr TextureFilter_Enum TextureFilter::REPEAT;
constexpr TextureFilter_Enum TextureFilter::Enum_MIN;
constexpr TextureFilter_Enum TextureFilter::Enum_MAX;
constexpr int TextureFilter::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TextureFilter::InitAsDefaultInstance() {
}
class TextureFilter::_Internal {
 public:
};

TextureFilter::TextureFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frame.proto.TextureFilter)
}
TextureFilter::TextureFilter(const TextureFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:frame.proto.TextureFilter)
}

void TextureFilter::SharedCtor() {
  value_ = 0;
}

TextureFilter::~TextureFilter() {
  // @@protoc_insertion_point(destructor:frame.proto.TextureFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextureFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TextureFilter::ArenaDtor(void* object) {
  TextureFilter* _this = reinterpret_cast< TextureFilter* >(object);
  (void)_this;
}
void TextureFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextureFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextureFilter& TextureFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextureFilter_Texture_2eproto.base);
  return *internal_default_instance();
}


void TextureFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.proto.TextureFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextureFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .frame.proto.TextureFilter.Enum value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::frame::proto::TextureFilter_Enum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextureFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.proto.TextureFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .frame.proto.TextureFilter.Enum value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.proto.TextureFilter)
  return target;
}

size_t TextureFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.proto.TextureFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .frame.proto.TextureFilter.Enum value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextureFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.proto.TextureFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TextureFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextureFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.proto.TextureFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.proto.TextureFilter)
    MergeFrom(*source);
  }
}

void TextureFilter::MergeFrom(const TextureFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.proto.TextureFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void TextureFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.proto.TextureFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureFilter::CopyFrom(const TextureFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.proto.TextureFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureFilter::IsInitialized() const {
  return true;
}

void TextureFilter::InternalSwap(TextureFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextureFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Texture::InitAsDefaultInstance() {
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->size_ = const_cast< ::frame::proto::Size*>(
      ::frame::proto::Size::internal_default_instance());
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->pixel_element_size_ = const_cast< ::frame::proto::PixelElementSize*>(
      ::frame::proto::PixelElementSize::internal_default_instance());
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->pixel_structure_ = const_cast< ::frame::proto::PixelStructure*>(
      ::frame::proto::PixelStructure::internal_default_instance());
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->min_filter_ = const_cast< ::frame::proto::TextureFilter*>(
      ::frame::proto::TextureFilter::internal_default_instance());
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->mag_filter_ = const_cast< ::frame::proto::TextureFilter*>(
      ::frame::proto::TextureFilter::internal_default_instance());
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->wrap_s_ = const_cast< ::frame::proto::TextureFilter*>(
      ::frame::proto::TextureFilter::internal_default_instance());
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->wrap_t_ = const_cast< ::frame::proto::TextureFilter*>(
      ::frame::proto::TextureFilter::internal_default_instance());
  ::frame::proto::_Texture_default_instance_._instance.get_mutable()->wrap_r_ = const_cast< ::frame::proto::TextureFilter*>(
      ::frame::proto::TextureFilter::internal_default_instance());
}
class Texture::_Internal {
 public:
  static const ::frame::proto::Size& size(const Texture* msg);
  static const ::frame::proto::PixelElementSize& pixel_element_size(const Texture* msg);
  static const ::frame::proto::PixelStructure& pixel_structure(const Texture* msg);
  static const ::frame::proto::TextureFilter& min_filter(const Texture* msg);
  static const ::frame::proto::TextureFilter& mag_filter(const Texture* msg);
  static const ::frame::proto::TextureFilter& wrap_s(const Texture* msg);
  static const ::frame::proto::TextureFilter& wrap_t(const Texture* msg);
  static const ::frame::proto::TextureFilter& wrap_r(const Texture* msg);
};

const ::frame::proto::Size&
Texture::_Internal::size(const Texture* msg) {
  return *msg->size_;
}
const ::frame::proto::PixelElementSize&
Texture::_Internal::pixel_element_size(const Texture* msg) {
  return *msg->pixel_element_size_;
}
const ::frame::proto::PixelStructure&
Texture::_Internal::pixel_structure(const Texture* msg) {
  return *msg->pixel_structure_;
}
const ::frame::proto::TextureFilter&
Texture::_Internal::min_filter(const Texture* msg) {
  return *msg->min_filter_;
}
const ::frame::proto::TextureFilter&
Texture::_Internal::mag_filter(const Texture* msg) {
  return *msg->mag_filter_;
}
const ::frame::proto::TextureFilter&
Texture::_Internal::wrap_s(const Texture* msg) {
  return *msg->wrap_s_;
}
const ::frame::proto::TextureFilter&
Texture::_Internal::wrap_t(const Texture* msg) {
  return *msg->wrap_t_;
}
const ::frame::proto::TextureFilter&
Texture::_Internal::wrap_r(const Texture* msg) {
  return *msg->wrap_r_;
}
void Texture::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
void Texture::clear_pixel_element_size() {
  if (GetArena() == nullptr && pixel_element_size_ != nullptr) {
    delete pixel_element_size_;
  }
  pixel_element_size_ = nullptr;
}
void Texture::clear_pixel_structure() {
  if (GetArena() == nullptr && pixel_structure_ != nullptr) {
    delete pixel_structure_;
  }
  pixel_structure_ = nullptr;
}
Texture::Texture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frame.proto.Texture)
}
Texture::Texture(const Texture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  pixels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pixels().empty()) {
    pixels_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pixels(),
      GetArena());
  }
  if (from._internal_has_size()) {
    size_ = new ::frame::proto::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_pixel_element_size()) {
    pixel_element_size_ = new ::frame::proto::PixelElementSize(*from.pixel_element_size_);
  } else {
    pixel_element_size_ = nullptr;
  }
  if (from._internal_has_pixel_structure()) {
    pixel_structure_ = new ::frame::proto::PixelStructure(*from.pixel_structure_);
  } else {
    pixel_structure_ = nullptr;
  }
  if (from._internal_has_min_filter()) {
    min_filter_ = new ::frame::proto::TextureFilter(*from.min_filter_);
  } else {
    min_filter_ = nullptr;
  }
  if (from._internal_has_mag_filter()) {
    mag_filter_ = new ::frame::proto::TextureFilter(*from.mag_filter_);
  } else {
    mag_filter_ = nullptr;
  }
  if (from._internal_has_wrap_s()) {
    wrap_s_ = new ::frame::proto::TextureFilter(*from.wrap_s_);
  } else {
    wrap_s_ = nullptr;
  }
  if (from._internal_has_wrap_t()) {
    wrap_t_ = new ::frame::proto::TextureFilter(*from.wrap_t_);
  } else {
    wrap_t_ = nullptr;
  }
  if (from._internal_has_wrap_r()) {
    wrap_r_ = new ::frame::proto::TextureFilter(*from.wrap_r_);
  } else {
    wrap_r_ = nullptr;
  }
  clear_ = from.clear_;
  // @@protoc_insertion_point(copy_constructor:frame.proto.Texture)
}

void Texture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Texture_Texture_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pixels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_) -
      reinterpret_cast<char*>(&size_)) + sizeof(clear_));
}

Texture::~Texture() {
  // @@protoc_insertion_point(destructor:frame.proto.Texture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Texture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pixels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete pixel_element_size_;
  if (this != internal_default_instance()) delete pixel_structure_;
  if (this != internal_default_instance()) delete min_filter_;
  if (this != internal_default_instance()) delete mag_filter_;
  if (this != internal_default_instance()) delete wrap_s_;
  if (this != internal_default_instance()) delete wrap_t_;
  if (this != internal_default_instance()) delete wrap_r_;
}

void Texture::ArenaDtor(void* object) {
  Texture* _this = reinterpret_cast< Texture* >(object);
  (void)_this;
}
void Texture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Texture& Texture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Texture_Texture_2eproto.base);
  return *internal_default_instance();
}


void Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.proto.Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pixels_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArena() == nullptr && pixel_element_size_ != nullptr) {
    delete pixel_element_size_;
  }
  pixel_element_size_ = nullptr;
  if (GetArena() == nullptr && pixel_structure_ != nullptr) {
    delete pixel_structure_;
  }
  pixel_structure_ = nullptr;
  if (GetArena() == nullptr && min_filter_ != nullptr) {
    delete min_filter_;
  }
  min_filter_ = nullptr;
  if (GetArena() == nullptr && mag_filter_ != nullptr) {
    delete mag_filter_;
  }
  mag_filter_ = nullptr;
  if (GetArena() == nullptr && wrap_s_ != nullptr) {
    delete wrap_s_;
  }
  wrap_s_ = nullptr;
  if (GetArena() == nullptr && wrap_t_ != nullptr) {
    delete wrap_t_;
  }
  wrap_t_ = nullptr;
  if (GetArena() == nullptr && wrap_r_ != nullptr) {
    delete wrap_r_;
  }
  wrap_r_ = nullptr;
  clear_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Texture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.proto.Texture.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool clear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.PixelElementSize pixel_element_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pixel_element_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.PixelStructure pixel_structure = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pixel_structure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.TextureFilter min_filter = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.TextureFilter mag_filter = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mag_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.TextureFilter wrap_s = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrap_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.TextureFilter wrap_t = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrap_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.proto.TextureFilter wrap_r = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrap_r(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pixels = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_pixels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Texture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.proto.Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.proto.Texture.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .frame.proto.Size size = 2;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  // bool clear = 3;
  if (this->clear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear(), target);
  }

  // .frame.proto.PixelElementSize pixel_element_size = 10;
  if (this->has_pixel_element_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pixel_element_size(this), target, stream);
  }

  // .frame.proto.PixelStructure pixel_structure = 11;
  if (this->has_pixel_structure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::pixel_structure(this), target, stream);
  }

  // .frame.proto.TextureFilter min_filter = 21;
  if (this->has_min_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::min_filter(this), target, stream);
  }

  // .frame.proto.TextureFilter mag_filter = 22;
  if (this->has_mag_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::mag_filter(this), target, stream);
  }

  // .frame.proto.TextureFilter wrap_s = 23;
  if (this->has_wrap_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::wrap_s(this), target, stream);
  }

  // .frame.proto.TextureFilter wrap_t = 24;
  if (this->has_wrap_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::wrap_t(this), target, stream);
  }

  // .frame.proto.TextureFilter wrap_r = 25;
  if (this->has_wrap_r()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::wrap_r(this), target, stream);
  }

  // bytes pixels = 30;
  if (this->pixels().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_pixels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.proto.Texture)
  return target;
}

size_t Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.proto.Texture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes pixels = 30;
  if (this->pixels().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pixels());
  }

  // .frame.proto.Size size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .frame.proto.PixelElementSize pixel_element_size = 10;
  if (this->has_pixel_element_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pixel_element_size_);
  }

  // .frame.proto.PixelStructure pixel_structure = 11;
  if (this->has_pixel_structure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pixel_structure_);
  }

  // .frame.proto.TextureFilter min_filter = 21;
  if (this->has_min_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_filter_);
  }

  // .frame.proto.TextureFilter mag_filter = 22;
  if (this->has_mag_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mag_filter_);
  }

  // .frame.proto.TextureFilter wrap_s = 23;
  if (this->has_wrap_s()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wrap_s_);
  }

  // .frame.proto.TextureFilter wrap_t = 24;
  if (this->has_wrap_t()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wrap_t_);
  }

  // .frame.proto.TextureFilter wrap_r = 25;
  if (this->has_wrap_r()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wrap_r_);
  }

  // bool clear = 3;
  if (this->clear() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Texture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.proto.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  const Texture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Texture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.proto.Texture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.proto.Texture)
    MergeFrom(*source);
  }
}

void Texture::MergeFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.proto.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.pixels().size() > 0) {
    _internal_set_pixels(from._internal_pixels());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::frame::proto::Size::MergeFrom(from._internal_size());
  }
  if (from.has_pixel_element_size()) {
    _internal_mutable_pixel_element_size()->::frame::proto::PixelElementSize::MergeFrom(from._internal_pixel_element_size());
  }
  if (from.has_pixel_structure()) {
    _internal_mutable_pixel_structure()->::frame::proto::PixelStructure::MergeFrom(from._internal_pixel_structure());
  }
  if (from.has_min_filter()) {
    _internal_mutable_min_filter()->::frame::proto::TextureFilter::MergeFrom(from._internal_min_filter());
  }
  if (from.has_mag_filter()) {
    _internal_mutable_mag_filter()->::frame::proto::TextureFilter::MergeFrom(from._internal_mag_filter());
  }
  if (from.has_wrap_s()) {
    _internal_mutable_wrap_s()->::frame::proto::TextureFilter::MergeFrom(from._internal_wrap_s());
  }
  if (from.has_wrap_t()) {
    _internal_mutable_wrap_t()->::frame::proto::TextureFilter::MergeFrom(from._internal_wrap_t());
  }
  if (from.has_wrap_r()) {
    _internal_mutable_wrap_r()->::frame::proto::TextureFilter::MergeFrom(from._internal_wrap_r());
  }
  if (from.clear() != 0) {
    _internal_set_clear(from._internal_clear());
  }
}

void Texture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.proto.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Texture::CopyFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.proto.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Texture::IsInitialized() const {
  return true;
}

void Texture::InternalSwap(Texture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pixels_.Swap(&other->pixels_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Texture, clear_)
      + sizeof(Texture::clear_)
      - PROTOBUF_FIELD_OFFSET(Texture, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Texture::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frame::proto::TextureFilter* Arena::CreateMaybeMessage< ::frame::proto::TextureFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frame::proto::TextureFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::proto::Texture* Arena::CreateMaybeMessage< ::frame::proto::Texture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frame::proto::Texture >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
