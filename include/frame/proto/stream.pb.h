// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_2eproto;
namespace frame {
namespace proto {
class Stream;
struct StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
}  // namespace proto
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::proto::Stream* Arena::CreateMaybeMessage<::frame::proto::Stream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {
namespace proto {

enum Stream_StreamEnum : int {
  Stream_StreamEnum_NONE = 0,
  Stream_StreamEnum_ALL = 1,
  Stream_StreamEnum_Stream_StreamEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Stream_StreamEnum_Stream_StreamEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Stream_StreamEnum_IsValid(int value);
constexpr Stream_StreamEnum Stream_StreamEnum_StreamEnum_MIN = Stream_StreamEnum_NONE;
constexpr Stream_StreamEnum Stream_StreamEnum_StreamEnum_MAX = Stream_StreamEnum_ALL;
constexpr int Stream_StreamEnum_StreamEnum_ARRAYSIZE = Stream_StreamEnum_StreamEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stream_StreamEnum_descriptor();
template<typename T>
inline const std::string& Stream_StreamEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Stream_StreamEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Stream_StreamEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Stream_StreamEnum_descriptor(), enum_t_value);
}
inline bool Stream_StreamEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Stream_StreamEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Stream_StreamEnum>(
    Stream_StreamEnum_descriptor(), name, value);
}
// ===================================================================

class Stream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.proto.Stream) */ {
 public:
  inline Stream() : Stream(nullptr) {}
  ~Stream() override;
  explicit PROTOBUF_CONSTEXPR Stream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stream(const Stream& from);
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stream& operator=(Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stream& from) {
    Stream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.proto.Stream";
  }
  protected:
  explicit Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Stream_StreamEnum StreamEnum;
  static constexpr StreamEnum NONE =
    Stream_StreamEnum_NONE;
  static constexpr StreamEnum ALL =
    Stream_StreamEnum_ALL;
  static inline bool StreamEnum_IsValid(int value) {
    return Stream_StreamEnum_IsValid(value);
  }
  static constexpr StreamEnum StreamEnum_MIN =
    Stream_StreamEnum_StreamEnum_MIN;
  static constexpr StreamEnum StreamEnum_MAX =
    Stream_StreamEnum_StreamEnum_MAX;
  static constexpr int StreamEnum_ARRAYSIZE =
    Stream_StreamEnum_StreamEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StreamEnum_descriptor() {
    return Stream_StreamEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& StreamEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StreamEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StreamEnum_Name.");
    return Stream_StreamEnum_Name(enum_t_value);
  }
  static inline bool StreamEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StreamEnum* value) {
    return Stream_StreamEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .frame.proto.Stream.StreamEnum value = 2;
  void clear_value();
  ::frame::proto::Stream_StreamEnum value() const;
  void set_value(::frame::proto::Stream_StreamEnum value);
  private:
  ::frame::proto::Stream_StreamEnum _internal_value() const;
  void _internal_set_value(::frame::proto::Stream_StreamEnum value);
  public:

  // @@protoc_insertion_point(class_scope:frame.proto.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stream

// string name = 1;
inline void Stream::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stream::name() const {
  // @@protoc_insertion_point(field_get:frame.proto.Stream.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stream::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:frame.proto.Stream.name)
}
inline std::string* Stream::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Stream.name)
  return _s;
}
inline const std::string& Stream::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stream::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stream::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stream::release_name() {
  // @@protoc_insertion_point(field_release:frame.proto.Stream.name)
  return _impl_.name_.Release();
}
inline void Stream::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Stream.name)
}

// .frame.proto.Stream.StreamEnum value = 2;
inline void Stream::clear_value() {
  _impl_.value_ = 0;
}
inline ::frame::proto::Stream_StreamEnum Stream::_internal_value() const {
  return static_cast< ::frame::proto::Stream_StreamEnum >(_impl_.value_);
}
inline ::frame::proto::Stream_StreamEnum Stream::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.Stream.value)
  return _internal_value();
}
inline void Stream::_internal_set_value(::frame::proto::Stream_StreamEnum value) {
  
  _impl_.value_ = value;
}
inline void Stream::set_value(::frame::proto::Stream_StreamEnum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.Stream.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace frame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frame::proto::Stream_StreamEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frame::proto::Stream_StreamEnum>() {
  return ::frame::proto::Stream_StreamEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stream_2eproto
